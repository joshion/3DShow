// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamPlayProto.proto

#ifndef PROTOBUF_StreamPlayProto_2eproto__INCLUDED
#define PROTOBUF_StreamPlayProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StreamPlayProto {

    // Internal implementation detail -- do not call these.
    void protobuf_AddDesc_StreamPlayProto_2eproto();
    void protobuf_AssignDesc_StreamPlayProto_2eproto();
    void protobuf_ShutdownFile_StreamPlayProto_2eproto();

    class pbCliReqChangeOrientation;
    class pbCliReqTouchBack;
    class pbSrvRespChangeOrientation;
    class pbSrvRespPrepare;
    class pbSrvRespResolution;
    class pbSrvRespStart;

    // ===================================================================

    class pbCliReqChangeOrientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbCliReqChangeOrientation) */ {
    public:
        pbCliReqChangeOrientation();
        virtual ~pbCliReqChangeOrientation();

        pbCliReqChangeOrientation(const pbCliReqChangeOrientation& from);

        inline pbCliReqChangeOrientation& operator=(const pbCliReqChangeOrientation& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbCliReqChangeOrientation& default_instance();

        void Swap(pbCliReqChangeOrientation* other);

        // implements Message ----------------------------------------------

        inline pbCliReqChangeOrientation* New() const {
            return New(NULL);
        }

        pbCliReqChangeOrientation* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbCliReqChangeOrientation& from);
        void MergeFrom(const pbCliReqChangeOrientation& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbCliReqChangeOrientation* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 orientation = 1;
        void clear_orientation();
        static const int kOrientationFieldNumber = 1;
        ::google::protobuf::int32 orientation() const;
        void set_orientation(::google::protobuf::int32 value);

        // optional int32 screenWidth = 2;
        void clear_screenwidth();
        static const int kScreenWidthFieldNumber = 2;
        ::google::protobuf::int32 screenwidth() const;
        void set_screenwidth(::google::protobuf::int32 value);

        // optional int32 screenHeight = 3;
        void clear_screenheight();
        static const int kScreenHeightFieldNumber = 3;
        ::google::protobuf::int32 screenheight() const;
        void set_screenheight(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbCliReqChangeOrientation)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::int32 orientation_;
        ::google::protobuf::int32 screenwidth_;
        ::google::protobuf::int32 screenheight_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbCliReqChangeOrientation* default_instance_;
    };
    // -------------------------------------------------------------------

    class pbSrvRespPrepare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbSrvRespPrepare) */ {
    public:
        pbSrvRespPrepare();
        virtual ~pbSrvRespPrepare();

        pbSrvRespPrepare(const pbSrvRespPrepare& from);

        inline pbSrvRespPrepare& operator=(const pbSrvRespPrepare& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbSrvRespPrepare& default_instance();

        void Swap(pbSrvRespPrepare* other);

        // implements Message ----------------------------------------------

        inline pbSrvRespPrepare* New() const {
            return New(NULL);
        }

        pbSrvRespPrepare* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbSrvRespPrepare& from);
        void MergeFrom(const pbSrvRespPrepare& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbSrvRespPrepare* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 resultType = 1;
        void clear_resulttype();
        static const int kResultTypeFieldNumber = 1;
        ::google::protobuf::int32 resulttype() const;
        void set_resulttype(::google::protobuf::int32 value);

        // optional string failReason = 2;
        void clear_failreason();
        static const int kFailReasonFieldNumber = 2;
        const ::std::string& failreason() const;
        void set_failreason(const ::std::string& value);
        void set_failreason(const char* value);
        void set_failreason(const char* value, size_t size);
        ::std::string* mutable_failreason();
        ::std::string* release_failreason();
        void set_allocated_failreason(::std::string* failreason);

        // optional int32 port = 3;
        void clear_port();
        static const int kPortFieldNumber = 3;
        ::google::protobuf::int32 port() const;
        void set_port(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbSrvRespPrepare)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::internal::ArenaStringPtr failreason_;
        ::google::protobuf::int32 resulttype_;
        ::google::protobuf::int32 port_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbSrvRespPrepare* default_instance_;
    };
    // -------------------------------------------------------------------

    class pbSrvRespChangeOrientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbSrvRespChangeOrientation) */ {
    public:
        pbSrvRespChangeOrientation();
        virtual ~pbSrvRespChangeOrientation();

        pbSrvRespChangeOrientation(const pbSrvRespChangeOrientation& from);

        inline pbSrvRespChangeOrientation& operator=(const pbSrvRespChangeOrientation& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbSrvRespChangeOrientation& default_instance();

        void Swap(pbSrvRespChangeOrientation* other);

        // implements Message ----------------------------------------------

        inline pbSrvRespChangeOrientation* New() const {
            return New(NULL);
        }

        pbSrvRespChangeOrientation* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbSrvRespChangeOrientation& from);
        void MergeFrom(const pbSrvRespChangeOrientation& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbSrvRespChangeOrientation* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 resultType = 1;
        void clear_resulttype();
        static const int kResultTypeFieldNumber = 1;
        ::google::protobuf::int32 resulttype() const;
        void set_resulttype(::google::protobuf::int32 value);

        // optional string failReason = 2;
        void clear_failreason();
        static const int kFailReasonFieldNumber = 2;
        const ::std::string& failreason() const;
        void set_failreason(const ::std::string& value);
        void set_failreason(const char* value);
        void set_failreason(const char* value, size_t size);
        ::std::string* mutable_failreason();
        ::std::string* release_failreason();
        void set_allocated_failreason(::std::string* failreason);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbSrvRespChangeOrientation)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::internal::ArenaStringPtr failreason_;
        ::google::protobuf::int32 resulttype_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbSrvRespChangeOrientation* default_instance_;
    };
    // -------------------------------------------------------------------

    class pbSrvRespStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbSrvRespStart) */ {
    public:
        pbSrvRespStart();
        virtual ~pbSrvRespStart();

        pbSrvRespStart(const pbSrvRespStart& from);

        inline pbSrvRespStart& operator=(const pbSrvRespStart& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbSrvRespStart& default_instance();

        void Swap(pbSrvRespStart* other);

        // implements Message ----------------------------------------------

        inline pbSrvRespStart* New() const {
            return New(NULL);
        }

        pbSrvRespStart* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbSrvRespStart& from);
        void MergeFrom(const pbSrvRespStart& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbSrvRespStart* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 resultType = 1;
        void clear_resulttype();
        static const int kResultTypeFieldNumber = 1;
        ::google::protobuf::int32 resulttype() const;
        void set_resulttype(::google::protobuf::int32 value);

        // optional string failReason = 2;
        void clear_failreason();
        static const int kFailReasonFieldNumber = 2;
        const ::std::string& failreason() const;
        void set_failreason(const ::std::string& value);
        void set_failreason(const char* value);
        void set_failreason(const char* value, size_t size);
        ::std::string* mutable_failreason();
        ::std::string* release_failreason();
        void set_allocated_failreason(::std::string* failreason);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbSrvRespStart)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::internal::ArenaStringPtr failreason_;
        ::google::protobuf::int32 resulttype_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbSrvRespStart* default_instance_;
    };
    // -------------------------------------------------------------------

    class pbSrvRespResolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbSrvRespResolution) */ {
    public:
        pbSrvRespResolution();
        virtual ~pbSrvRespResolution();

        pbSrvRespResolution(const pbSrvRespResolution& from);

        inline pbSrvRespResolution& operator=(const pbSrvRespResolution& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbSrvRespResolution& default_instance();

        void Swap(pbSrvRespResolution* other);

        // implements Message ----------------------------------------------

        inline pbSrvRespResolution* New() const {
            return New(NULL);
        }

        pbSrvRespResolution* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbSrvRespResolution& from);
        void MergeFrom(const pbSrvRespResolution& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbSrvRespResolution* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 screenWidth = 1;
        void clear_screenwidth();
        static const int kScreenWidthFieldNumber = 1;
        ::google::protobuf::int32 screenwidth() const;
        void set_screenwidth(::google::protobuf::int32 value);

        // optional int32 screenHeight = 2;
        void clear_screenheight();
        static const int kScreenHeightFieldNumber = 2;
        ::google::protobuf::int32 screenheight() const;
        void set_screenheight(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbSrvRespResolution)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::int32 screenwidth_;
        ::google::protobuf::int32 screenheight_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbSrvRespResolution* default_instance_;
    };
    // -------------------------------------------------------------------

    class pbCliReqTouchBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamPlayProto.pbCliReqTouchBack) */ {
    public:
        pbCliReqTouchBack();
        virtual ~pbCliReqTouchBack();

        pbCliReqTouchBack(const pbCliReqTouchBack& from);

        inline pbCliReqTouchBack& operator=(const pbCliReqTouchBack& from) {
            CopyFrom(from);
            return *this;
        }

        static const ::google::protobuf::Descriptor* descriptor();
        static const pbCliReqTouchBack& default_instance();

        void Swap(pbCliReqTouchBack* other);

        // implements Message ----------------------------------------------

        inline pbCliReqTouchBack* New() const {
            return New(NULL);
        }

        pbCliReqTouchBack* New(::google::protobuf::Arena* arena) const;
        void CopyFrom(const ::google::protobuf::Message& from);
        void MergeFrom(const ::google::protobuf::Message& from);
        void CopyFrom(const pbCliReqTouchBack& from);
        void MergeFrom(const pbCliReqTouchBack& from);
        void Clear();
        bool IsInitialized() const;

        int ByteSize() const;
        bool MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input);
        void SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const;
        ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
            bool deterministic, ::google::protobuf::uint8* output) const;
        ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
            return InternalSerializeWithCachedSizesToArray(false, output);
        }
        int GetCachedSize() const {
            return _cached_size_;
        }
    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const;
        void InternalSwap(pbCliReqTouchBack* other);
    private:
        inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
            return _internal_metadata_.arena();
        }
        inline void* MaybeArenaPtr() const {
            return _internal_metadata_.raw_arena_ptr();
        }
    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // optional int32 switch = 1;
        void clear_switch_();
        static const int kSwitchFieldNumber = 1;
        ::google::protobuf::int32 switch_() const;
        void set_switch_(::google::protobuf::int32 value);

        // optional int32 sockType = 2;
        void clear_socktype();
        static const int kSockTypeFieldNumber = 2;
        ::google::protobuf::int32 socktype() const;
        void set_socktype(::google::protobuf::int32 value);

        // optional int32 port = 3;
        void clear_port();
        static const int kPortFieldNumber = 3;
        ::google::protobuf::int32 port() const;
        void set_port(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:StreamPlayProto.pbCliReqTouchBack)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        bool _is_default_instance_;
        ::google::protobuf::int32 switch__;
        ::google::protobuf::int32 socktype_;
        ::google::protobuf::int32 port_;
        mutable int _cached_size_;
        friend void  protobuf_AddDesc_StreamPlayProto_2eproto();
        friend void protobuf_AssignDesc_StreamPlayProto_2eproto();
        friend void protobuf_ShutdownFile_StreamPlayProto_2eproto();

        void InitAsDefaultInstance();
        static pbCliReqTouchBack* default_instance_;
    };
    // ===================================================================


    // ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// pbCliReqChangeOrientation

// optional int32 orientation = 1;
    inline void pbCliReqChangeOrientation::clear_orientation() {
        orientation_ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqChangeOrientation::orientation() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.orientation)
        return orientation_;
    }
    inline void pbCliReqChangeOrientation::set_orientation(::google::protobuf::int32 value) {

        orientation_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.orientation)
    }

    // optional int32 screenWidth = 2;
    inline void pbCliReqChangeOrientation::clear_screenwidth() {
        screenwidth_ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqChangeOrientation::screenwidth() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.screenWidth)
        return screenwidth_;
    }
    inline void pbCliReqChangeOrientation::set_screenwidth(::google::protobuf::int32 value) {

        screenwidth_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.screenWidth)
    }

    // optional int32 screenHeight = 3;
    inline void pbCliReqChangeOrientation::clear_screenheight() {
        screenheight_ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqChangeOrientation::screenheight() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.screenHeight)
        return screenheight_;
    }
    inline void pbCliReqChangeOrientation::set_screenheight(::google::protobuf::int32 value) {

        screenheight_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.screenHeight)
    }

    // -------------------------------------------------------------------

    // pbSrvRespPrepare

    // optional int32 resultType = 1;
    inline void pbSrvRespPrepare::clear_resulttype() {
        resulttype_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespPrepare::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.resultType)
        return resulttype_;
    }
    inline void pbSrvRespPrepare::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.resultType)
    }

    // optional string failReason = 2;
    inline void pbSrvRespPrepare::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline const ::std::string& pbSrvRespPrepare::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespPrepare::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    inline void pbSrvRespPrepare::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    inline void pbSrvRespPrepare::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    inline ::std::string* pbSrvRespPrepare::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespPrepare.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* pbSrvRespPrepare::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespPrepare.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespPrepare::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespPrepare.failReason)
    }

    // optional int32 port = 3;
    inline void pbSrvRespPrepare::clear_port() {
        port_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespPrepare::port() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.port)
        return port_;
    }
    inline void pbSrvRespPrepare::set_port(::google::protobuf::int32 value) {

        port_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.port)
    }

    // -------------------------------------------------------------------

    // pbSrvRespChangeOrientation

    // optional int32 resultType = 1;
    inline void pbSrvRespChangeOrientation::clear_resulttype() {
        resulttype_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespChangeOrientation::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespChangeOrientation.resultType)
        return resulttype_;
    }
    inline void pbSrvRespChangeOrientation::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespChangeOrientation.resultType)
    }

    // optional string failReason = 2;
    inline void pbSrvRespChangeOrientation::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline const ::std::string& pbSrvRespChangeOrientation::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespChangeOrientation::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    inline void pbSrvRespChangeOrientation::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    inline void pbSrvRespChangeOrientation::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    inline ::std::string* pbSrvRespChangeOrientation::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* pbSrvRespChangeOrientation::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespChangeOrientation.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespChangeOrientation::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }

    // -------------------------------------------------------------------

    // pbSrvRespStart

    // optional int32 resultType = 1;
    inline void pbSrvRespStart::clear_resulttype() {
        resulttype_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespStart::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespStart.resultType)
        return resulttype_;
    }
    inline void pbSrvRespStart::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespStart.resultType)
    }

    // optional string failReason = 2;
    inline void pbSrvRespStart::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline const ::std::string& pbSrvRespStart::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespStart.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespStart::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespStart.failReason)
    }
    inline void pbSrvRespStart::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespStart.failReason)
    }
    inline void pbSrvRespStart::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespStart.failReason)
    }
    inline ::std::string* pbSrvRespStart::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespStart.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline ::std::string* pbSrvRespStart::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespStart.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inline void pbSrvRespStart::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespStart.failReason)
    }

    // -------------------------------------------------------------------

    // pbSrvRespResolution

    // optional int32 screenWidth = 1;
    inline void pbSrvRespResolution::clear_screenwidth() {
        screenwidth_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespResolution::screenwidth() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespResolution.screenWidth)
        return screenwidth_;
    }
    inline void pbSrvRespResolution::set_screenwidth(::google::protobuf::int32 value) {

        screenwidth_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespResolution.screenWidth)
    }

    // optional int32 screenHeight = 2;
    inline void pbSrvRespResolution::clear_screenheight() {
        screenheight_ = 0;
    }
    inline ::google::protobuf::int32 pbSrvRespResolution::screenheight() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespResolution.screenHeight)
        return screenheight_;
    }
    inline void pbSrvRespResolution::set_screenheight(::google::protobuf::int32 value) {

        screenheight_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespResolution.screenHeight)
    }

    // -------------------------------------------------------------------

    // pbCliReqTouchBack

    // optional int32 switch = 1;
    inline void pbCliReqTouchBack::clear_switch_() {
        switch__ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqTouchBack::switch_() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.switch)
        return switch__;
    }
    inline void pbCliReqTouchBack::set_switch_(::google::protobuf::int32 value) {

        switch__ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.switch)
    }

    // optional int32 sockType = 2;
    inline void pbCliReqTouchBack::clear_socktype() {
        socktype_ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqTouchBack::socktype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.sockType)
        return socktype_;
    }
    inline void pbCliReqTouchBack::set_socktype(::google::protobuf::int32 value) {

        socktype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.sockType)
    }

    // optional int32 port = 3;
    inline void pbCliReqTouchBack::clear_port() {
        port_ = 0;
    }
    inline ::google::protobuf::int32 pbCliReqTouchBack::port() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.port)
        return port_;
    }
    inline void pbCliReqTouchBack::set_port(::google::protobuf::int32 value) {

        port_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.port)
    }

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------


    // @@protoc_insertion_point(namespace_scope)

}  // namespace StreamPlayProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StreamPlayProto_2eproto__INCLUDED
