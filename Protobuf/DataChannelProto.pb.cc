// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataChannelProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataChannelProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataChannelProto {
    namespace {
        const ::google::protobuf::Descriptor* pbValidatePort_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbValidatePort_reflection_ = NULL;
    }  // namespace

    void protobuf_AssignDesc_DataChannelProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
    void protobuf_AssignDesc_DataChannelProto_2eproto() {
        protobuf_AddDesc_DataChannelProto_2eproto();
        const ::google::protobuf::FileDescriptor* file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "DataChannelProto.proto");
        GOOGLE_CHECK(file != NULL);
        pbValidatePort_descriptor_ = file->message_type(0);
        static const int pbValidatePort_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbValidatePort, devicename_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbValidatePort, guid_),
        };
        pbValidatePort_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbValidatePort_descriptor_,
                pbValidatePort::default_instance_,
                pbValidatePort_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbValidatePort),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbValidatePort, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbValidatePort, _is_default_instance_));
    }

    namespace {
        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
        inline void protobuf_AssignDescriptorsOnce() {
            ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                &protobuf_AssignDesc_DataChannelProto_2eproto);
        }

        void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
        void protobuf_RegisterTypes(const ::std::string&) {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbValidatePort_descriptor_, &pbValidatePort::default_instance());
        }
    }  // namespace

    void protobuf_ShutdownFile_DataChannelProto_2eproto() {
        delete pbValidatePort::default_instance_;
        delete pbValidatePort_reflection_;
    }

    void protobuf_AddDesc_DataChannelProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
    void protobuf_AddDesc_DataChannelProto_2eproto() {
        static bool already_here = false;
        if (already_here) return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\026DataChannelProto.proto\022\020DataChannelPro"
            "to\"2\n\016pbValidatePort\022\022\n\ndeviceName\030\001 \001(\t"
            "\022\014\n\004guid\030\002 \001(\tb\006proto3", 102);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "DataChannelProto.proto", &protobuf_RegisterTypes);
        pbValidatePort::default_instance_ = new pbValidatePort();
        pbValidatePort::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataChannelProto_2eproto);
    }

    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_DataChannelProto_2eproto {
        StaticDescriptorInitializer_DataChannelProto_2eproto() {
            protobuf_AddDesc_DataChannelProto_2eproto();
        }
    } static_descriptor_initializer_DataChannelProto_2eproto_;

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbValidatePort::kDeviceNameFieldNumber;
    const int pbValidatePort::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbValidatePort::pbValidatePort()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:DataChannelProto.pbValidatePort)
    }

    void pbValidatePort::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbValidatePort::pbValidatePort(const pbValidatePort& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:DataChannelProto.pbValidatePort)
    }

    void pbValidatePort::SharedCtor() {
        _is_default_instance_ = false;
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    pbValidatePort::~pbValidatePort() {
        // @@protoc_insertion_point(destructor:DataChannelProto.pbValidatePort)
        SharedDtor();
    }

    void pbValidatePort::SharedDtor() {
        devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != default_instance_) {
        }
    }

    void pbValidatePort::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbValidatePort::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbValidatePort_descriptor_;
    }

    const pbValidatePort& pbValidatePort::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_DataChannelProto_2eproto();
        return *default_instance_;
    }

    pbValidatePort* pbValidatePort::default_instance_ = NULL;

    pbValidatePort* pbValidatePort::New(::google::protobuf::Arena* arena) const {
        pbValidatePort* n = new pbValidatePort;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbValidatePort::Clear() {
        // @@protoc_insertion_point(message_clear_start:DataChannelProto.pbValidatePort)
        devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool pbValidatePort::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:DataChannelProto.pbValidatePort)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional string deviceName = 1;
            case 1: {
                if (tag == 10) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_devicename()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->devicename().data(), this->devicename().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "DataChannelProto.pbValidatePort.deviceName"));
                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_guid;
                break;
            }

                    // optional string guid = 2;
            case 2: {
                if (tag == 18) {
                parse_guid:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_guid()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->guid().data(), this->guid().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "DataChannelProto.pbValidatePort.guid"));
                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:DataChannelProto.pbValidatePort)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:DataChannelProto.pbValidatePort)
        return false;
#undef DO_
    }

    void pbValidatePort::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:DataChannelProto.pbValidatePort)
        // optional string deviceName = 1;
        if (this->devicename().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->devicename().data(), this->devicename().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "DataChannelProto.pbValidatePort.deviceName");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                1, this->devicename(), output);
        }

        // optional string guid = 2;
        if (this->guid().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->guid().data(), this->guid().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "DataChannelProto.pbValidatePort.guid");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->guid(), output);
        }

        // @@protoc_insertion_point(serialize_end:DataChannelProto.pbValidatePort)
    }

    ::google::protobuf::uint8* pbValidatePort::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:DataChannelProto.pbValidatePort)
        // optional string deviceName = 1;
        if (this->devicename().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->devicename().data(), this->devicename().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "DataChannelProto.pbValidatePort.deviceName");
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    1, this->devicename(), target);
        }

        // optional string guid = 2;
        if (this->guid().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->guid().data(), this->guid().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "DataChannelProto.pbValidatePort.guid");
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->guid(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:DataChannelProto.pbValidatePort)
        return target;
    }

    int pbValidatePort::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:DataChannelProto.pbValidatePort)
        int total_size = 0;

        // optional string deviceName = 1;
        if (this->devicename().size() > 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->devicename());
        }

        // optional string guid = 2;
        if (this->guid().size() > 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->guid());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbValidatePort::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:DataChannelProto.pbValidatePort)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbValidatePort* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbValidatePort>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataChannelProto.pbValidatePort)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:DataChannelProto.pbValidatePort)
            MergeFrom(*source);
        }
    }

    void pbValidatePort::MergeFrom(const pbValidatePort& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:DataChannelProto.pbValidatePort)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.devicename().size() > 0) {
            devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
        }
        if (from.guid().size() > 0) {
            guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
        }
    }

    void pbValidatePort::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:DataChannelProto.pbValidatePort)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbValidatePort::CopyFrom(const pbValidatePort& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:DataChannelProto.pbValidatePort)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbValidatePort::IsInitialized() const {
        return true;
    }

    void pbValidatePort::Swap(pbValidatePort* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbValidatePort::InternalSwap(pbValidatePort* other) {
        devicename_.Swap(&other->devicename_);
        guid_.Swap(&other->guid_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbValidatePort::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbValidatePort_descriptor_;
        metadata.reflection = pbValidatePort_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbValidatePort

    // optional string deviceName = 1;
    void pbValidatePort::clear_devicename() {
        devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    const ::std::string& pbValidatePort::devicename() const {
        // @@protoc_insertion_point(field_get:DataChannelProto.pbValidatePort.deviceName)
        return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbValidatePort::set_devicename(const ::std::string& value) {
        devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:DataChannelProto.pbValidatePort.deviceName)
    }
    void pbValidatePort::set_devicename(const char* value) {
        devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:DataChannelProto.pbValidatePort.deviceName)
    }
    void pbValidatePort::set_devicename(const char* value, size_t size) {
        devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:DataChannelProto.pbValidatePort.deviceName)
    }
    ::std::string* pbValidatePort::mutable_devicename() {
        // @@protoc_insertion_point(field_mutable:DataChannelProto.pbValidatePort.deviceName)
        return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* pbValidatePort::release_devicename() {
        // @@protoc_insertion_point(field_release:DataChannelProto.pbValidatePort.deviceName)

        return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbValidatePort::set_allocated_devicename(::std::string* devicename) {
        if (devicename != NULL) {
        }
        else {
        }
        devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
        // @@protoc_insertion_point(field_set_allocated:DataChannelProto.pbValidatePort.deviceName)
    }

    // optional string guid = 2;
    void pbValidatePort::clear_guid() {
        guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    const ::std::string& pbValidatePort::guid() const {
        // @@protoc_insertion_point(field_get:DataChannelProto.pbValidatePort.guid)
        return guid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbValidatePort::set_guid(const ::std::string& value) {
        guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:DataChannelProto.pbValidatePort.guid)
    }
    void pbValidatePort::set_guid(const char* value) {
        guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:DataChannelProto.pbValidatePort.guid)
    }
    void pbValidatePort::set_guid(const char* value, size_t size) {
        guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:DataChannelProto.pbValidatePort.guid)
    }
    ::std::string* pbValidatePort::mutable_guid() {
        // @@protoc_insertion_point(field_mutable:DataChannelProto.pbValidatePort.guid)
        return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* pbValidatePort::release_guid() {
        // @@protoc_insertion_point(field_release:DataChannelProto.pbValidatePort.guid)

        return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbValidatePort::set_allocated_guid(::std::string* guid) {
        if (guid != NULL) {
        }
        else {
        }
        guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
        // @@protoc_insertion_point(field_set_allocated:DataChannelProto.pbValidatePort.guid)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)
}  // namespace DataChannelProto

// @@protoc_insertion_point(global_scope)