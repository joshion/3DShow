// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamPlayProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StreamPlayProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StreamPlayProto {

    namespace {

        const ::google::protobuf::Descriptor* pbCliReqChangeOrientation_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbCliReqChangeOrientation_reflection_ = NULL;
        const ::google::protobuf::Descriptor* pbSrvRespPrepare_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbSrvRespPrepare_reflection_ = NULL;
        const ::google::protobuf::Descriptor* pbSrvRespChangeOrientation_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbSrvRespChangeOrientation_reflection_ = NULL;
        const ::google::protobuf::Descriptor* pbSrvRespStart_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbSrvRespStart_reflection_ = NULL;
        const ::google::protobuf::Descriptor* pbSrvRespResolution_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbSrvRespResolution_reflection_ = NULL;
        const ::google::protobuf::Descriptor* pbCliReqTouchBack_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection*
            pbCliReqTouchBack_reflection_ = NULL;

    }  // namespace


    void protobuf_AssignDesc_StreamPlayProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
    void protobuf_AssignDesc_StreamPlayProto_2eproto() {
        protobuf_AddDesc_StreamPlayProto_2eproto();
        const ::google::protobuf::FileDescriptor* file =
            ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "StreamPlayProto.proto");
        GOOGLE_CHECK(file != NULL);
        pbCliReqChangeOrientation_descriptor_ = file->message_type(0);
        static const int pbCliReqChangeOrientation_offsets_[3] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqChangeOrientation, orientation_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqChangeOrientation, screenwidth_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqChangeOrientation, screenheight_),
        };
        pbCliReqChangeOrientation_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbCliReqChangeOrientation_descriptor_,
                pbCliReqChangeOrientation::default_instance_,
                pbCliReqChangeOrientation_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbCliReqChangeOrientation),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqChangeOrientation, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqChangeOrientation, _is_default_instance_));
        pbSrvRespPrepare_descriptor_ = file->message_type(1);
        static const int pbSrvRespPrepare_offsets_[3] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespPrepare, resulttype_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespPrepare, failreason_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespPrepare, port_),
        };
        pbSrvRespPrepare_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbSrvRespPrepare_descriptor_,
                pbSrvRespPrepare::default_instance_,
                pbSrvRespPrepare_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbSrvRespPrepare),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespPrepare, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespPrepare, _is_default_instance_));
        pbSrvRespChangeOrientation_descriptor_ = file->message_type(2);
        static const int pbSrvRespChangeOrientation_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespChangeOrientation, resulttype_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespChangeOrientation, failreason_),
        };
        pbSrvRespChangeOrientation_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbSrvRespChangeOrientation_descriptor_,
                pbSrvRespChangeOrientation::default_instance_,
                pbSrvRespChangeOrientation_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbSrvRespChangeOrientation),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespChangeOrientation, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespChangeOrientation, _is_default_instance_));
        pbSrvRespStart_descriptor_ = file->message_type(3);
        static const int pbSrvRespStart_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespStart, resulttype_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespStart, failreason_),
        };
        pbSrvRespStart_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbSrvRespStart_descriptor_,
                pbSrvRespStart::default_instance_,
                pbSrvRespStart_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbSrvRespStart),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespStart, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespStart, _is_default_instance_));
        pbSrvRespResolution_descriptor_ = file->message_type(4);
        static const int pbSrvRespResolution_offsets_[2] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespResolution, screenwidth_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespResolution, screenheight_),
        };
        pbSrvRespResolution_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbSrvRespResolution_descriptor_,
                pbSrvRespResolution::default_instance_,
                pbSrvRespResolution_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbSrvRespResolution),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespResolution, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSrvRespResolution, _is_default_instance_));
        pbCliReqTouchBack_descriptor_ = file->message_type(5);
        static const int pbCliReqTouchBack_offsets_[3] = {
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqTouchBack, switch__),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqTouchBack, socktype_),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqTouchBack, port_),
        };
        pbCliReqTouchBack_reflection_ =
            ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
                pbCliReqTouchBack_descriptor_,
                pbCliReqTouchBack::default_instance_,
                pbCliReqTouchBack_offsets_,
                -1,
                -1,
                -1,
                sizeof(pbCliReqTouchBack),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqTouchBack, _internal_metadata_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCliReqTouchBack, _is_default_instance_));
    }

    namespace {

        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
        inline void protobuf_AssignDescriptorsOnce() {
            ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                &protobuf_AssignDesc_StreamPlayProto_2eproto);
        }

        void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
        void protobuf_RegisterTypes(const ::std::string&) {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbCliReqChangeOrientation_descriptor_, &pbCliReqChangeOrientation::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbSrvRespPrepare_descriptor_, &pbSrvRespPrepare::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbSrvRespChangeOrientation_descriptor_, &pbSrvRespChangeOrientation::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbSrvRespStart_descriptor_, &pbSrvRespStart::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbSrvRespResolution_descriptor_, &pbSrvRespResolution::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                pbCliReqTouchBack_descriptor_, &pbCliReqTouchBack::default_instance());
        }

    }  // namespace

    void protobuf_ShutdownFile_StreamPlayProto_2eproto() {
        delete pbCliReqChangeOrientation::default_instance_;
        delete pbCliReqChangeOrientation_reflection_;
        delete pbSrvRespPrepare::default_instance_;
        delete pbSrvRespPrepare_reflection_;
        delete pbSrvRespChangeOrientation::default_instance_;
        delete pbSrvRespChangeOrientation_reflection_;
        delete pbSrvRespStart::default_instance_;
        delete pbSrvRespStart_reflection_;
        delete pbSrvRespResolution::default_instance_;
        delete pbSrvRespResolution_reflection_;
        delete pbCliReqTouchBack::default_instance_;
        delete pbCliReqTouchBack_reflection_;
    }

    void protobuf_AddDesc_StreamPlayProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
    void protobuf_AddDesc_StreamPlayProto_2eproto() {
        static bool already_here = false;
        if (already_here) return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
            "\n\025StreamPlayProto.proto\022\017StreamPlayProto"
            "\"[\n\031pbCliReqChangeOrientation\022\023\n\013orienta"
            "tion\030\001 \001(\005\022\023\n\013screenWidth\030\002 \001(\005\022\024\n\014scree"
            "nHeight\030\003 \001(\005\"H\n\020pbSrvRespPrepare\022\022\n\nres"
            "ultType\030\001 \001(\005\022\022\n\nfailReason\030\002 \001(\t\022\014\n\004por"
            "t\030\003 \001(\005\"D\n\032pbSrvRespChangeOrientation\022\022\n"
            "\nresultType\030\001 \001(\005\022\022\n\nfailReason\030\002 \001(\t\"8\n"
            "\016pbSrvRespStart\022\022\n\nresultType\030\001 \001(\005\022\022\n\nf"
            "ailReason\030\002 \001(\t\"@\n\023pbSrvRespResolution\022\023"
            "\n\013screenWidth\030\001 \001(\005\022\024\n\014screenHeight\030\002 \001("
            "\005\"C\n\021pbCliReqTouchBack\022\016\n\006switch\030\001 \001(\005\022\020"
            "\n\010sockType\030\002 \001(\005\022\014\n\004port\030\003 \001(\005b\006proto3", 478);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
            "StreamPlayProto.proto", &protobuf_RegisterTypes);
        pbCliReqChangeOrientation::default_instance_ = new pbCliReqChangeOrientation();
        pbSrvRespPrepare::default_instance_ = new pbSrvRespPrepare();
        pbSrvRespChangeOrientation::default_instance_ = new pbSrvRespChangeOrientation();
        pbSrvRespStart::default_instance_ = new pbSrvRespStart();
        pbSrvRespResolution::default_instance_ = new pbSrvRespResolution();
        pbCliReqTouchBack::default_instance_ = new pbCliReqTouchBack();
        pbCliReqChangeOrientation::default_instance_->InitAsDefaultInstance();
        pbSrvRespPrepare::default_instance_->InitAsDefaultInstance();
        pbSrvRespChangeOrientation::default_instance_->InitAsDefaultInstance();
        pbSrvRespStart::default_instance_->InitAsDefaultInstance();
        pbSrvRespResolution::default_instance_->InitAsDefaultInstance();
        pbCliReqTouchBack::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StreamPlayProto_2eproto);
    }

    // Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_StreamPlayProto_2eproto {
        StaticDescriptorInitializer_StreamPlayProto_2eproto() {
            protobuf_AddDesc_StreamPlayProto_2eproto();
        }
    } static_descriptor_initializer_StreamPlayProto_2eproto_;

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbCliReqChangeOrientation::kOrientationFieldNumber;
    const int pbCliReqChangeOrientation::kScreenWidthFieldNumber;
    const int pbCliReqChangeOrientation::kScreenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbCliReqChangeOrientation::pbCliReqChangeOrientation()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbCliReqChangeOrientation)
    }

    void pbCliReqChangeOrientation::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbCliReqChangeOrientation::pbCliReqChangeOrientation(const pbCliReqChangeOrientation& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbCliReqChangeOrientation)
    }

    void pbCliReqChangeOrientation::SharedCtor() {
        _is_default_instance_ = false;
        _cached_size_ = 0;
        orientation_ = 0;
        screenwidth_ = 0;
        screenheight_ = 0;
    }

    pbCliReqChangeOrientation::~pbCliReqChangeOrientation() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbCliReqChangeOrientation)
        SharedDtor();
    }

    void pbCliReqChangeOrientation::SharedDtor() {
        if (this != default_instance_) {
        }
    }

    void pbCliReqChangeOrientation::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbCliReqChangeOrientation::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbCliReqChangeOrientation_descriptor_;
    }

    const pbCliReqChangeOrientation& pbCliReqChangeOrientation::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbCliReqChangeOrientation* pbCliReqChangeOrientation::default_instance_ = NULL;

    pbCliReqChangeOrientation* pbCliReqChangeOrientation::New(::google::protobuf::Arena* arena) const {
        pbCliReqChangeOrientation* n = new pbCliReqChangeOrientation;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbCliReqChangeOrientation::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbCliReqChangeOrientation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbCliReqChangeOrientation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbCliReqChangeOrientation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

        ZR_(orientation_, screenheight_);

#undef ZR_HELPER_
#undef ZR_

    }

    bool pbCliReqChangeOrientation::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbCliReqChangeOrientation)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 orientation = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &orientation_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16)) goto parse_screenWidth;
                break;
            }

                    // optional int32 screenWidth = 2;
            case 2: {
                if (tag == 16) {
                parse_screenWidth:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &screenwidth_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24)) goto parse_screenHeight;
                break;
            }

                    // optional int32 screenHeight = 3;
            case 3: {
                if (tag == 24) {
                parse_screenHeight:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &screenheight_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbCliReqChangeOrientation)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbCliReqChangeOrientation)
        return false;
#undef DO_
    }

    void pbCliReqChangeOrientation::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbCliReqChangeOrientation)
        // optional int32 orientation = 1;
        if (this->orientation() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orientation(), output);
        }

        // optional int32 screenWidth = 2;
        if (this->screenwidth() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenwidth(), output);
        }

        // optional int32 screenHeight = 3;
        if (this->screenheight() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->screenheight(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbCliReqChangeOrientation)
    }

    ::google::protobuf::uint8* pbCliReqChangeOrientation::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbCliReqChangeOrientation)
        // optional int32 orientation = 1;
        if (this->orientation() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orientation(), target);
        }

        // optional int32 screenWidth = 2;
        if (this->screenwidth() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenwidth(), target);
        }

        // optional int32 screenHeight = 3;
        if (this->screenheight() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->screenheight(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbCliReqChangeOrientation)
        return target;
    }

    int pbCliReqChangeOrientation::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbCliReqChangeOrientation)
        int total_size = 0;

        // optional int32 orientation = 1;
        if (this->orientation() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->orientation());
        }

        // optional int32 screenWidth = 2;
        if (this->screenwidth() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->screenwidth());
        }

        // optional int32 screenHeight = 3;
        if (this->screenheight() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->screenheight());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbCliReqChangeOrientation::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbCliReqChangeOrientation)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbCliReqChangeOrientation* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbCliReqChangeOrientation>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbCliReqChangeOrientation)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbCliReqChangeOrientation)
            MergeFrom(*source);
        }
    }

    void pbCliReqChangeOrientation::MergeFrom(const pbCliReqChangeOrientation& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbCliReqChangeOrientation)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.orientation() != 0) {
            set_orientation(from.orientation());
        }
        if (from.screenwidth() != 0) {
            set_screenwidth(from.screenwidth());
        }
        if (from.screenheight() != 0) {
            set_screenheight(from.screenheight());
        }
    }

    void pbCliReqChangeOrientation::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbCliReqChangeOrientation)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbCliReqChangeOrientation::CopyFrom(const pbCliReqChangeOrientation& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbCliReqChangeOrientation)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbCliReqChangeOrientation::IsInitialized() const {

        return true;
    }

    void pbCliReqChangeOrientation::Swap(pbCliReqChangeOrientation* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbCliReqChangeOrientation::InternalSwap(pbCliReqChangeOrientation* other) {
        std::swap(orientation_, other->orientation_);
        std::swap(screenwidth_, other->screenwidth_);
        std::swap(screenheight_, other->screenheight_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbCliReqChangeOrientation::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbCliReqChangeOrientation_descriptor_;
        metadata.reflection = pbCliReqChangeOrientation_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbCliReqChangeOrientation

    // optional int32 orientation = 1;
    void pbCliReqChangeOrientation::clear_orientation() {
        orientation_ = 0;
    }
    ::google::protobuf::int32 pbCliReqChangeOrientation::orientation() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.orientation)
        return orientation_;
    }
    void pbCliReqChangeOrientation::set_orientation(::google::protobuf::int32 value) {

        orientation_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.orientation)
    }

    // optional int32 screenWidth = 2;
    void pbCliReqChangeOrientation::clear_screenwidth() {
        screenwidth_ = 0;
    }
    ::google::protobuf::int32 pbCliReqChangeOrientation::screenwidth() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.screenWidth)
        return screenwidth_;
    }
    void pbCliReqChangeOrientation::set_screenwidth(::google::protobuf::int32 value) {

        screenwidth_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.screenWidth)
    }

    // optional int32 screenHeight = 3;
    void pbCliReqChangeOrientation::clear_screenheight() {
        screenheight_ = 0;
    }
    ::google::protobuf::int32 pbCliReqChangeOrientation::screenheight() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqChangeOrientation.screenHeight)
        return screenheight_;
    }
    void pbCliReqChangeOrientation::set_screenheight(::google::protobuf::int32 value) {

        screenheight_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqChangeOrientation.screenHeight)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbSrvRespPrepare::kResultTypeFieldNumber;
    const int pbSrvRespPrepare::kFailReasonFieldNumber;
    const int pbSrvRespPrepare::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbSrvRespPrepare::pbSrvRespPrepare()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbSrvRespPrepare)
    }

    void pbSrvRespPrepare::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbSrvRespPrepare::pbSrvRespPrepare(const pbSrvRespPrepare& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbSrvRespPrepare)
    }

    void pbSrvRespPrepare::SharedCtor() {
        _is_default_instance_ = false;
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        resulttype_ = 0;
        failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        port_ = 0;
    }

    pbSrvRespPrepare::~pbSrvRespPrepare() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbSrvRespPrepare)
        SharedDtor();
    }

    void pbSrvRespPrepare::SharedDtor() {
        failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != default_instance_) {
        }
    }

    void pbSrvRespPrepare::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbSrvRespPrepare::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbSrvRespPrepare_descriptor_;
    }

    const pbSrvRespPrepare& pbSrvRespPrepare::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbSrvRespPrepare* pbSrvRespPrepare::default_instance_ = NULL;

    pbSrvRespPrepare* pbSrvRespPrepare::New(::google::protobuf::Arena* arena) const {
        pbSrvRespPrepare* n = new pbSrvRespPrepare;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbSrvRespPrepare::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbSrvRespPrepare)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbSrvRespPrepare, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbSrvRespPrepare*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

        ZR_(resulttype_, port_);
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

    }

    bool pbSrvRespPrepare::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbSrvRespPrepare)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 resultType = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &resulttype_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_failReason;
                break;
            }

                    // optional string failReason = 2;
            case 2: {
                if (tag == 18) {
                parse_failReason:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_failreason()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->failreason().data(), this->failreason().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "StreamPlayProto.pbSrvRespPrepare.failReason"));
                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24)) goto parse_port;
                break;
            }

                    // optional int32 port = 3;
            case 3: {
                if (tag == 24) {
                parse_port:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &port_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbSrvRespPrepare)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbSrvRespPrepare)
        return false;
#undef DO_
    }

    void pbSrvRespPrepare::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbSrvRespPrepare)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resulttype(), output);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespPrepare.failReason");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->failreason(), output);
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbSrvRespPrepare)
    }

    ::google::protobuf::uint8* pbSrvRespPrepare::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbSrvRespPrepare)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resulttype(), target);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespPrepare.failReason");
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->failreason(), target);
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbSrvRespPrepare)
        return target;
    }

    int pbSrvRespPrepare::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbSrvRespPrepare)
        int total_size = 0;

        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->resulttype());
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->failreason());
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->port());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbSrvRespPrepare::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbSrvRespPrepare)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbSrvRespPrepare* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbSrvRespPrepare>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbSrvRespPrepare)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbSrvRespPrepare)
            MergeFrom(*source);
        }
    }

    void pbSrvRespPrepare::MergeFrom(const pbSrvRespPrepare& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbSrvRespPrepare)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.resulttype() != 0) {
            set_resulttype(from.resulttype());
        }
        if (from.failreason().size() > 0) {

            failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
        }
        if (from.port() != 0) {
            set_port(from.port());
        }
    }

    void pbSrvRespPrepare::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbSrvRespPrepare)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbSrvRespPrepare::CopyFrom(const pbSrvRespPrepare& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbSrvRespPrepare)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbSrvRespPrepare::IsInitialized() const {

        return true;
    }

    void pbSrvRespPrepare::Swap(pbSrvRespPrepare* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbSrvRespPrepare::InternalSwap(pbSrvRespPrepare* other) {
        std::swap(resulttype_, other->resulttype_);
        failreason_.Swap(&other->failreason_);
        std::swap(port_, other->port_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbSrvRespPrepare::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbSrvRespPrepare_descriptor_;
        metadata.reflection = pbSrvRespPrepare_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbSrvRespPrepare

    // optional int32 resultType = 1;
    void pbSrvRespPrepare::clear_resulttype() {
        resulttype_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespPrepare::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.resultType)
        return resulttype_;
    }
    void pbSrvRespPrepare::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.resultType)
    }

    // optional string failReason = 2;
    void pbSrvRespPrepare::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    const ::std::string& pbSrvRespPrepare::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespPrepare::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    void pbSrvRespPrepare::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    void pbSrvRespPrepare::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespPrepare.failReason)
    }
    ::std::string* pbSrvRespPrepare::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespPrepare.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* pbSrvRespPrepare::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespPrepare.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespPrepare::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespPrepare.failReason)
    }

    // optional int32 port = 3;
    void pbSrvRespPrepare::clear_port() {
        port_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespPrepare::port() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespPrepare.port)
        return port_;
    }
    void pbSrvRespPrepare::set_port(::google::protobuf::int32 value) {

        port_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespPrepare.port)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbSrvRespChangeOrientation::kResultTypeFieldNumber;
    const int pbSrvRespChangeOrientation::kFailReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbSrvRespChangeOrientation::pbSrvRespChangeOrientation()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbSrvRespChangeOrientation)
    }

    void pbSrvRespChangeOrientation::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbSrvRespChangeOrientation::pbSrvRespChangeOrientation(const pbSrvRespChangeOrientation& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbSrvRespChangeOrientation)
    }

    void pbSrvRespChangeOrientation::SharedCtor() {
        _is_default_instance_ = false;
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        resulttype_ = 0;
        failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    pbSrvRespChangeOrientation::~pbSrvRespChangeOrientation() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbSrvRespChangeOrientation)
        SharedDtor();
    }

    void pbSrvRespChangeOrientation::SharedDtor() {
        failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != default_instance_) {
        }
    }

    void pbSrvRespChangeOrientation::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbSrvRespChangeOrientation::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbSrvRespChangeOrientation_descriptor_;
    }

    const pbSrvRespChangeOrientation& pbSrvRespChangeOrientation::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbSrvRespChangeOrientation* pbSrvRespChangeOrientation::default_instance_ = NULL;

    pbSrvRespChangeOrientation* pbSrvRespChangeOrientation::New(::google::protobuf::Arena* arena) const {
        pbSrvRespChangeOrientation* n = new pbSrvRespChangeOrientation;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbSrvRespChangeOrientation::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbSrvRespChangeOrientation)
        resulttype_ = 0;
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool pbSrvRespChangeOrientation::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbSrvRespChangeOrientation)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 resultType = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &resulttype_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_failReason;
                break;
            }

                    // optional string failReason = 2;
            case 2: {
                if (tag == 18) {
                parse_failReason:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_failreason()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->failreason().data(), this->failreason().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "StreamPlayProto.pbSrvRespChangeOrientation.failReason"));
                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbSrvRespChangeOrientation)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbSrvRespChangeOrientation)
        return false;
#undef DO_
    }

    void pbSrvRespChangeOrientation::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbSrvRespChangeOrientation)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resulttype(), output);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespChangeOrientation.failReason");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->failreason(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbSrvRespChangeOrientation)
    }

    ::google::protobuf::uint8* pbSrvRespChangeOrientation::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbSrvRespChangeOrientation)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resulttype(), target);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespChangeOrientation.failReason");
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->failreason(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbSrvRespChangeOrientation)
        return target;
    }

    int pbSrvRespChangeOrientation::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbSrvRespChangeOrientation)
        int total_size = 0;

        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->resulttype());
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->failreason());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbSrvRespChangeOrientation::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbSrvRespChangeOrientation)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbSrvRespChangeOrientation* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbSrvRespChangeOrientation>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbSrvRespChangeOrientation)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbSrvRespChangeOrientation)
            MergeFrom(*source);
        }
    }

    void pbSrvRespChangeOrientation::MergeFrom(const pbSrvRespChangeOrientation& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbSrvRespChangeOrientation)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.resulttype() != 0) {
            set_resulttype(from.resulttype());
        }
        if (from.failreason().size() > 0) {

            failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
        }
    }

    void pbSrvRespChangeOrientation::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbSrvRespChangeOrientation)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbSrvRespChangeOrientation::CopyFrom(const pbSrvRespChangeOrientation& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbSrvRespChangeOrientation)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbSrvRespChangeOrientation::IsInitialized() const {

        return true;
    }

    void pbSrvRespChangeOrientation::Swap(pbSrvRespChangeOrientation* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbSrvRespChangeOrientation::InternalSwap(pbSrvRespChangeOrientation* other) {
        std::swap(resulttype_, other->resulttype_);
        failreason_.Swap(&other->failreason_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbSrvRespChangeOrientation::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbSrvRespChangeOrientation_descriptor_;
        metadata.reflection = pbSrvRespChangeOrientation_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbSrvRespChangeOrientation

    // optional int32 resultType = 1;
    void pbSrvRespChangeOrientation::clear_resulttype() {
        resulttype_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespChangeOrientation::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespChangeOrientation.resultType)
        return resulttype_;
    }
    void pbSrvRespChangeOrientation::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespChangeOrientation.resultType)
    }

    // optional string failReason = 2;
    void pbSrvRespChangeOrientation::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    const ::std::string& pbSrvRespChangeOrientation::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespChangeOrientation::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    void pbSrvRespChangeOrientation::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    void pbSrvRespChangeOrientation::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }
    ::std::string* pbSrvRespChangeOrientation::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* pbSrvRespChangeOrientation::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespChangeOrientation.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespChangeOrientation::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespChangeOrientation.failReason)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbSrvRespStart::kResultTypeFieldNumber;
    const int pbSrvRespStart::kFailReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbSrvRespStart::pbSrvRespStart()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbSrvRespStart)
    }

    void pbSrvRespStart::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbSrvRespStart::pbSrvRespStart(const pbSrvRespStart& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbSrvRespStart)
    }

    void pbSrvRespStart::SharedCtor() {
        _is_default_instance_ = false;
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        resulttype_ = 0;
        failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    pbSrvRespStart::~pbSrvRespStart() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbSrvRespStart)
        SharedDtor();
    }

    void pbSrvRespStart::SharedDtor() {
        failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        if (this != default_instance_) {
        }
    }

    void pbSrvRespStart::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbSrvRespStart::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbSrvRespStart_descriptor_;
    }

    const pbSrvRespStart& pbSrvRespStart::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbSrvRespStart* pbSrvRespStart::default_instance_ = NULL;

    pbSrvRespStart* pbSrvRespStart::New(::google::protobuf::Arena* arena) const {
        pbSrvRespStart* n = new pbSrvRespStart;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbSrvRespStart::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbSrvRespStart)
        resulttype_ = 0;
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    bool pbSrvRespStart::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbSrvRespStart)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 resultType = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &resulttype_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(18)) goto parse_failReason;
                break;
            }

                    // optional string failReason = 2;
            case 2: {
                if (tag == 18) {
                parse_failReason:
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                        input, this->mutable_failreason()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->failreason().data(), this->failreason().length(),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "StreamPlayProto.pbSrvRespStart.failReason"));
                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbSrvRespStart)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbSrvRespStart)
        return false;
#undef DO_
    }

    void pbSrvRespStart::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbSrvRespStart)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resulttype(), output);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespStart.failReason");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                2, this->failreason(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbSrvRespStart)
    }

    ::google::protobuf::uint8* pbSrvRespStart::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbSrvRespStart)
        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resulttype(), target);
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                this->failreason().data(), this->failreason().length(),
                ::google::protobuf::internal::WireFormatLite::SERIALIZE,
                "StreamPlayProto.pbSrvRespStart.failReason");
            target =
                ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                    2, this->failreason(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbSrvRespStart)
        return target;
    }

    int pbSrvRespStart::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbSrvRespStart)
        int total_size = 0;

        // optional int32 resultType = 1;
        if (this->resulttype() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->resulttype());
        }

        // optional string failReason = 2;
        if (this->failreason().size() > 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::StringSize(
                    this->failreason());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbSrvRespStart::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbSrvRespStart)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbSrvRespStart* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbSrvRespStart>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbSrvRespStart)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbSrvRespStart)
            MergeFrom(*source);
        }
    }

    void pbSrvRespStart::MergeFrom(const pbSrvRespStart& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbSrvRespStart)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.resulttype() != 0) {
            set_resulttype(from.resulttype());
        }
        if (from.failreason().size() > 0) {

            failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
        }
    }

    void pbSrvRespStart::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbSrvRespStart)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbSrvRespStart::CopyFrom(const pbSrvRespStart& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbSrvRespStart)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbSrvRespStart::IsInitialized() const {

        return true;
    }

    void pbSrvRespStart::Swap(pbSrvRespStart* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbSrvRespStart::InternalSwap(pbSrvRespStart* other) {
        std::swap(resulttype_, other->resulttype_);
        failreason_.Swap(&other->failreason_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbSrvRespStart::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbSrvRespStart_descriptor_;
        metadata.reflection = pbSrvRespStart_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbSrvRespStart

    // optional int32 resultType = 1;
    void pbSrvRespStart::clear_resulttype() {
        resulttype_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespStart::resulttype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespStart.resultType)
        return resulttype_;
    }
    void pbSrvRespStart::set_resulttype(::google::protobuf::int32 value) {

        resulttype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespStart.resultType)
    }

    // optional string failReason = 2;
    void pbSrvRespStart::clear_failreason() {
        failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    const ::std::string& pbSrvRespStart::failreason() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespStart.failReason)
        return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespStart::set_failreason(const ::std::string& value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespStart.failReason)
    }
    void pbSrvRespStart::set_failreason(const char* value) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:StreamPlayProto.pbSrvRespStart.failReason)
    }
    void pbSrvRespStart::set_failreason(const char* value, size_t size) {

        failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char*>(value), size));
        // @@protoc_insertion_point(field_set_pointer:StreamPlayProto.pbSrvRespStart.failReason)
    }
    ::std::string* pbSrvRespStart::mutable_failreason() {

        // @@protoc_insertion_point(field_mutable:StreamPlayProto.pbSrvRespStart.failReason)
        return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ::std::string* pbSrvRespStart::release_failreason() {
        // @@protoc_insertion_point(field_release:StreamPlayProto.pbSrvRespStart.failReason)

        return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    void pbSrvRespStart::set_allocated_failreason(::std::string* failreason) {
        if (failreason != NULL) {

        }
        else {

        }
        failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
        // @@protoc_insertion_point(field_set_allocated:StreamPlayProto.pbSrvRespStart.failReason)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbSrvRespResolution::kScreenWidthFieldNumber;
    const int pbSrvRespResolution::kScreenHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbSrvRespResolution::pbSrvRespResolution()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbSrvRespResolution)
    }

    void pbSrvRespResolution::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbSrvRespResolution::pbSrvRespResolution(const pbSrvRespResolution& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbSrvRespResolution)
    }

    void pbSrvRespResolution::SharedCtor() {
        _is_default_instance_ = false;
        _cached_size_ = 0;
        screenwidth_ = 0;
        screenheight_ = 0;
    }

    pbSrvRespResolution::~pbSrvRespResolution() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbSrvRespResolution)
        SharedDtor();
    }

    void pbSrvRespResolution::SharedDtor() {
        if (this != default_instance_) {
        }
    }

    void pbSrvRespResolution::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbSrvRespResolution::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbSrvRespResolution_descriptor_;
    }

    const pbSrvRespResolution& pbSrvRespResolution::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbSrvRespResolution* pbSrvRespResolution::default_instance_ = NULL;

    pbSrvRespResolution* pbSrvRespResolution::New(::google::protobuf::Arena* arena) const {
        pbSrvRespResolution* n = new pbSrvRespResolution;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbSrvRespResolution::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbSrvRespResolution)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbSrvRespResolution, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbSrvRespResolution*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

        ZR_(screenwidth_, screenheight_);

#undef ZR_HELPER_
#undef ZR_

    }

    bool pbSrvRespResolution::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbSrvRespResolution)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 screenWidth = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &screenwidth_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16)) goto parse_screenHeight;
                break;
            }

                    // optional int32 screenHeight = 2;
            case 2: {
                if (tag == 16) {
                parse_screenHeight:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &screenheight_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbSrvRespResolution)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbSrvRespResolution)
        return false;
#undef DO_
    }

    void pbSrvRespResolution::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbSrvRespResolution)
        // optional int32 screenWidth = 1;
        if (this->screenwidth() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->screenwidth(), output);
        }

        // optional int32 screenHeight = 2;
        if (this->screenheight() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenheight(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbSrvRespResolution)
    }

    ::google::protobuf::uint8* pbSrvRespResolution::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbSrvRespResolution)
        // optional int32 screenWidth = 1;
        if (this->screenwidth() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->screenwidth(), target);
        }

        // optional int32 screenHeight = 2;
        if (this->screenheight() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenheight(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbSrvRespResolution)
        return target;
    }

    int pbSrvRespResolution::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbSrvRespResolution)
        int total_size = 0;

        // optional int32 screenWidth = 1;
        if (this->screenwidth() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->screenwidth());
        }

        // optional int32 screenHeight = 2;
        if (this->screenheight() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->screenheight());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbSrvRespResolution::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbSrvRespResolution)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbSrvRespResolution* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbSrvRespResolution>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbSrvRespResolution)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbSrvRespResolution)
            MergeFrom(*source);
        }
    }

    void pbSrvRespResolution::MergeFrom(const pbSrvRespResolution& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbSrvRespResolution)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.screenwidth() != 0) {
            set_screenwidth(from.screenwidth());
        }
        if (from.screenheight() != 0) {
            set_screenheight(from.screenheight());
        }
    }

    void pbSrvRespResolution::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbSrvRespResolution)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbSrvRespResolution::CopyFrom(const pbSrvRespResolution& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbSrvRespResolution)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbSrvRespResolution::IsInitialized() const {

        return true;
    }

    void pbSrvRespResolution::Swap(pbSrvRespResolution* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbSrvRespResolution::InternalSwap(pbSrvRespResolution* other) {
        std::swap(screenwidth_, other->screenwidth_);
        std::swap(screenheight_, other->screenheight_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbSrvRespResolution::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbSrvRespResolution_descriptor_;
        metadata.reflection = pbSrvRespResolution_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbSrvRespResolution

    // optional int32 screenWidth = 1;
    void pbSrvRespResolution::clear_screenwidth() {
        screenwidth_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespResolution::screenwidth() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespResolution.screenWidth)
        return screenwidth_;
    }
    void pbSrvRespResolution::set_screenwidth(::google::protobuf::int32 value) {

        screenwidth_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespResolution.screenWidth)
    }

    // optional int32 screenHeight = 2;
    void pbSrvRespResolution::clear_screenheight() {
        screenheight_ = 0;
    }
    ::google::protobuf::int32 pbSrvRespResolution::screenheight() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbSrvRespResolution.screenHeight)
        return screenheight_;
    }
    void pbSrvRespResolution::set_screenheight(::google::protobuf::int32 value) {

        screenheight_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbSrvRespResolution.screenHeight)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int pbCliReqTouchBack::kSwitchFieldNumber;
    const int pbCliReqTouchBack::kSockTypeFieldNumber;
    const int pbCliReqTouchBack::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

    pbCliReqTouchBack::pbCliReqTouchBack()
        : ::google::protobuf::Message(), _internal_metadata_(NULL) {
        SharedCtor();
        // @@protoc_insertion_point(constructor:StreamPlayProto.pbCliReqTouchBack)
    }

    void pbCliReqTouchBack::InitAsDefaultInstance() {
        _is_default_instance_ = true;
    }

    pbCliReqTouchBack::pbCliReqTouchBack(const pbCliReqTouchBack& from)
        : ::google::protobuf::Message(),
        _internal_metadata_(NULL) {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:StreamPlayProto.pbCliReqTouchBack)
    }

    void pbCliReqTouchBack::SharedCtor() {
        _is_default_instance_ = false;
        _cached_size_ = 0;
        switch__ = 0;
        socktype_ = 0;
        port_ = 0;
    }

    pbCliReqTouchBack::~pbCliReqTouchBack() {
        // @@protoc_insertion_point(destructor:StreamPlayProto.pbCliReqTouchBack)
        SharedDtor();
    }

    void pbCliReqTouchBack::SharedDtor() {
        if (this != default_instance_) {
        }
    }

    void pbCliReqTouchBack::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }
    const ::google::protobuf::Descriptor* pbCliReqTouchBack::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return pbCliReqTouchBack_descriptor_;
    }

    const pbCliReqTouchBack& pbCliReqTouchBack::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_StreamPlayProto_2eproto();
        return *default_instance_;
    }

    pbCliReqTouchBack* pbCliReqTouchBack::default_instance_ = NULL;

    pbCliReqTouchBack* pbCliReqTouchBack::New(::google::protobuf::Arena* arena) const {
        pbCliReqTouchBack* n = new pbCliReqTouchBack;
        if (arena != NULL) {
            arena->Own(n);
        }
        return n;
    }

    void pbCliReqTouchBack::Clear() {
        // @@protoc_insertion_point(message_clear_start:StreamPlayProto.pbCliReqTouchBack)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbCliReqTouchBack, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbCliReqTouchBack*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

        ZR_(switch__, port_);

#undef ZR_HELPER_
#undef ZR_

    }

    bool pbCliReqTouchBack::MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:StreamPlayProto.pbCliReqTouchBack)
        for (;;) {
            ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // optional int32 switch = 1;
            case 1: {
                if (tag == 8) {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &switch__)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(16)) goto parse_sockType;
                break;
            }

                    // optional int32 sockType = 2;
            case 2: {
                if (tag == 16) {
                parse_sockType:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &socktype_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectTag(24)) goto parse_port;
                break;
            }

                    // optional int32 port = 3;
            case 3: {
                if (tag == 24) {
                parse_port:
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                        ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                            input, &port_)));

                }
                else {
                    goto handle_unusual;
                }
                if (input->ExpectAtEnd()) goto success;
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0 ||
                    ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                    ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
                break;
            }
            }
        }
    success:
        // @@protoc_insertion_point(parse_success:StreamPlayProto.pbCliReqTouchBack)
        return true;
    failure:
        // @@protoc_insertion_point(parse_failure:StreamPlayProto.pbCliReqTouchBack)
        return false;
#undef DO_
    }

    void pbCliReqTouchBack::SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const {
        // @@protoc_insertion_point(serialize_start:StreamPlayProto.pbCliReqTouchBack)
        // optional int32 switch = 1;
        if (this->switch_() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->switch_(), output);
        }

        // optional int32 sockType = 2;
        if (this->socktype() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->socktype(), output);
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
        }

        // @@protoc_insertion_point(serialize_end:StreamPlayProto.pbCliReqTouchBack)
    }

    ::google::protobuf::uint8* pbCliReqTouchBack::InternalSerializeWithCachedSizesToArray(
        bool deterministic, ::google::protobuf::uint8* target) const {
        // @@protoc_insertion_point(serialize_to_array_start:StreamPlayProto.pbCliReqTouchBack)
        // optional int32 switch = 1;
        if (this->switch_() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->switch_(), target);
        }

        // optional int32 sockType = 2;
        if (this->socktype() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->socktype(), target);
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
        }

        // @@protoc_insertion_point(serialize_to_array_end:StreamPlayProto.pbCliReqTouchBack)
        return target;
    }

    int pbCliReqTouchBack::ByteSize() const {
        // @@protoc_insertion_point(message_byte_size_start:StreamPlayProto.pbCliReqTouchBack)
        int total_size = 0;

        // optional int32 switch = 1;
        if (this->switch_() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->switch_());
        }

        // optional int32 sockType = 2;
        if (this->socktype() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->socktype());
        }

        // optional int32 port = 3;
        if (this->port() != 0) {
            total_size += 1 +
                ::google::protobuf::internal::WireFormatLite::Int32Size(
                    this->port());
        }

        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void pbCliReqTouchBack::MergeFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_merge_from_start:StreamPlayProto.pbCliReqTouchBack)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        const pbCliReqTouchBack* source =
            ::google::protobuf::internal::DynamicCastToGenerated<const pbCliReqTouchBack>(
                &from);
        if (source == NULL) {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:StreamPlayProto.pbCliReqTouchBack)
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        }
        else {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:StreamPlayProto.pbCliReqTouchBack)
            MergeFrom(*source);
        }
    }

    void pbCliReqTouchBack::MergeFrom(const pbCliReqTouchBack& from) {
        // @@protoc_insertion_point(class_specific_merge_from_start:StreamPlayProto.pbCliReqTouchBack)
        if (GOOGLE_PREDICT_FALSE(&from == this)) {
            ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
        }
        if (from.switch_() != 0) {
            set_switch_(from.switch_());
        }
        if (from.socktype() != 0) {
            set_socktype(from.socktype());
        }
        if (from.port() != 0) {
            set_port(from.port());
        }
    }

    void pbCliReqTouchBack::CopyFrom(const ::google::protobuf::Message& from) {
        // @@protoc_insertion_point(generalized_copy_from_start:StreamPlayProto.pbCliReqTouchBack)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void pbCliReqTouchBack::CopyFrom(const pbCliReqTouchBack& from) {
        // @@protoc_insertion_point(class_specific_copy_from_start:StreamPlayProto.pbCliReqTouchBack)
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool pbCliReqTouchBack::IsInitialized() const {

        return true;
    }

    void pbCliReqTouchBack::Swap(pbCliReqTouchBack* other) {
        if (other == this) return;
        InternalSwap(other);
    }
    void pbCliReqTouchBack::InternalSwap(pbCliReqTouchBack* other) {
        std::swap(switch__, other->switch__);
        std::swap(socktype_, other->socktype_);
        std::swap(port_, other->port_);
        _internal_metadata_.Swap(&other->_internal_metadata_);
        std::swap(_cached_size_, other->_cached_size_);
    }

    ::google::protobuf::Metadata pbCliReqTouchBack::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = pbCliReqTouchBack_descriptor_;
        metadata.reflection = pbCliReqTouchBack_reflection_;
        return metadata;
    }

#if PROTOBUF_INLINE_NOT_IN_HEADERS
    // pbCliReqTouchBack

    // optional int32 switch = 1;
    void pbCliReqTouchBack::clear_switch_() {
        switch__ = 0;
    }
    ::google::protobuf::int32 pbCliReqTouchBack::switch_() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.switch)
        return switch__;
    }
    void pbCliReqTouchBack::set_switch_(::google::protobuf::int32 value) {

        switch__ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.switch)
    }

    // optional int32 sockType = 2;
    void pbCliReqTouchBack::clear_socktype() {
        socktype_ = 0;
    }
    ::google::protobuf::int32 pbCliReqTouchBack::socktype() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.sockType)
        return socktype_;
    }
    void pbCliReqTouchBack::set_socktype(::google::protobuf::int32 value) {

        socktype_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.sockType)
    }

    // optional int32 port = 3;
    void pbCliReqTouchBack::clear_port() {
        port_ = 0;
    }
    ::google::protobuf::int32 pbCliReqTouchBack::port() const {
        // @@protoc_insertion_point(field_get:StreamPlayProto.pbCliReqTouchBack.port)
        return port_;
    }
    void pbCliReqTouchBack::set_port(::google::protobuf::int32 value) {

        port_ = value;
        // @@protoc_insertion_point(field_set:StreamPlayProto.pbCliReqTouchBack.port)
    }

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

    // @@protoc_insertion_point(namespace_scope)

}  // namespace StreamPlayProto

// @@protoc_insertion_point(global_scope)
