// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkeletonProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkeletonProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SkeletonProto {

namespace {

const ::google::protobuf::Descriptor* pbRespStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRespStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRespEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRespEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkeletonProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SkeletonProto_2eproto() {
  protobuf_AddDesc_SkeletonProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkeletonProto.proto");
  GOOGLE_CHECK(file != NULL);
  pbRespStart_descriptor_ = file->message_type(0);
  static const int pbRespStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, resulttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, pcsvrpoint_),
  };
  pbRespStart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbRespStart_descriptor_,
      pbRespStart::default_instance_,
      pbRespStart_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbRespStart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, _is_default_instance_));
  pbRespEnd_descriptor_ = file->message_type(1);
  static const int pbRespEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespEnd, resulttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespEnd, failreason_),
  };
  pbRespEnd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbRespEnd_descriptor_,
      pbRespEnd::default_instance_,
      pbRespEnd_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbRespEnd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespEnd, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespEnd, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkeletonProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbRespStart_descriptor_, &pbRespStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbRespEnd_descriptor_, &pbRespEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkeletonProto_2eproto() {
  delete pbRespStart::default_instance_;
  delete pbRespStart_reflection_;
  delete pbRespEnd::default_instance_;
  delete pbRespEnd_reflection_;
}

void protobuf_AddDesc_SkeletonProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SkeletonProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SkeletonProto.proto\022\rSkeletonProto\"I\n\013"
    "pbRespStart\022\022\n\nresultType\030\001 \001(\005\022\022\n\nfailR"
    "eason\030\002 \001(\t\022\022\n\npcSvrPoint\030\003 \001(\005\"3\n\tpbRes"
    "pEnd\022\022\n\nresultType\030\001 \001(\005\022\022\n\nfailReason\030\002"
    " \001(\tb\006proto3", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkeletonProto.proto", &protobuf_RegisterTypes);
  pbRespStart::default_instance_ = new pbRespStart();
  pbRespEnd::default_instance_ = new pbRespEnd();
  pbRespStart::default_instance_->InitAsDefaultInstance();
  pbRespEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkeletonProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkeletonProto_2eproto {
  StaticDescriptorInitializer_SkeletonProto_2eproto() {
    protobuf_AddDesc_SkeletonProto_2eproto();
  }
} static_descriptor_initializer_SkeletonProto_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbRespStart::kResultTypeFieldNumber;
const int pbRespStart::kFailReasonFieldNumber;
const int pbRespStart::kPcSvrPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbRespStart::pbRespStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkeletonProto.pbRespStart)
}

void pbRespStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbRespStart::pbRespStart(const pbRespStart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkeletonProto.pbRespStart)
}

void pbRespStart::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resulttype_ = 0;
  failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcsvrpoint_ = 0;
}

pbRespStart::~pbRespStart() {
  // @@protoc_insertion_point(destructor:SkeletonProto.pbRespStart)
  SharedDtor();
}

void pbRespStart::SharedDtor() {
  failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbRespStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRespStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRespStart_descriptor_;
}

const pbRespStart& pbRespStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkeletonProto_2eproto();
  return *default_instance_;
}

pbRespStart* pbRespStart::default_instance_ = NULL;

pbRespStart* pbRespStart::New(::google::protobuf::Arena* arena) const {
  pbRespStart* n = new pbRespStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbRespStart::Clear() {
// @@protoc_insertion_point(message_clear_start:SkeletonProto.pbRespStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbRespStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbRespStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resulttype_, pcsvrpoint_);
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool pbRespStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkeletonProto.pbRespStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resulttype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failReason;
        break;
      }

      // optional string failReason = 2;
      case 2: {
        if (tag == 18) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SkeletonProto.pbRespStart.failReason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pcSvrPoint;
        break;
      }

      // optional int32 pcSvrPoint = 3;
      case 3: {
        if (tag == 24) {
         parse_pcSvrPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcsvrpoint_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkeletonProto.pbRespStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkeletonProto.pbRespStart)
  return false;
#undef DO_
}

void pbRespStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkeletonProto.pbRespStart)
  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resulttype(), output);
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SkeletonProto.pbRespStart.failReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failreason(), output);
  }

  // optional int32 pcSvrPoint = 3;
  if (this->pcsvrpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pcsvrpoint(), output);
  }

  // @@protoc_insertion_point(serialize_end:SkeletonProto.pbRespStart)
}

::google::protobuf::uint8* pbRespStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkeletonProto.pbRespStart)
  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resulttype(), target);
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SkeletonProto.pbRespStart.failReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->failreason(), target);
  }

  // optional int32 pcSvrPoint = 3;
  if (this->pcsvrpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pcsvrpoint(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SkeletonProto.pbRespStart)
  return target;
}

int pbRespStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SkeletonProto.pbRespStart)
  int total_size = 0;

  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resulttype());
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->failreason());
  }

  // optional int32 pcSvrPoint = 3;
  if (this->pcsvrpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pcsvrpoint());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRespStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SkeletonProto.pbRespStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbRespStart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbRespStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SkeletonProto.pbRespStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SkeletonProto.pbRespStart)
    MergeFrom(*source);
  }
}

void pbRespStart::MergeFrom(const pbRespStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SkeletonProto.pbRespStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resulttype() != 0) {
    set_resulttype(from.resulttype());
  }
  if (from.failreason().size() > 0) {

    failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
  }
  if (from.pcsvrpoint() != 0) {
    set_pcsvrpoint(from.pcsvrpoint());
  }
}

void pbRespStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SkeletonProto.pbRespStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRespStart::CopyFrom(const pbRespStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SkeletonProto.pbRespStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRespStart::IsInitialized() const {

  return true;
}

void pbRespStart::Swap(pbRespStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbRespStart::InternalSwap(pbRespStart* other) {
  std::swap(resulttype_, other->resulttype_);
  failreason_.Swap(&other->failreason_);
  std::swap(pcsvrpoint_, other->pcsvrpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbRespStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRespStart_descriptor_;
  metadata.reflection = pbRespStart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbRespStart

// optional int32 resultType = 1;
void pbRespStart::clear_resulttype() {
  resulttype_ = 0;
}
 ::google::protobuf::int32 pbRespStart::resulttype() const {
  // @@protoc_insertion_point(field_get:SkeletonProto.pbRespStart.resultType)
  return resulttype_;
}
 void pbRespStart::set_resulttype(::google::protobuf::int32 value) {
  
  resulttype_ = value;
  // @@protoc_insertion_point(field_set:SkeletonProto.pbRespStart.resultType)
}

// optional string failReason = 2;
void pbRespStart::clear_failreason() {
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbRespStart::failreason() const {
  // @@protoc_insertion_point(field_get:SkeletonProto.pbRespStart.failReason)
  return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_failreason(const ::std::string& value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SkeletonProto.pbRespStart.failReason)
}
 void pbRespStart::set_failreason(const char* value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SkeletonProto.pbRespStart.failReason)
}
 void pbRespStart::set_failreason(const char* value, size_t size) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SkeletonProto.pbRespStart.failReason)
}
 ::std::string* pbRespStart::mutable_failreason() {
  
  // @@protoc_insertion_point(field_mutable:SkeletonProto.pbRespStart.failReason)
  return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbRespStart::release_failreason() {
  // @@protoc_insertion_point(field_release:SkeletonProto.pbRespStart.failReason)
  
  return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_allocated_failreason(::std::string* failreason) {
  if (failreason != NULL) {
    
  } else {
    
  }
  failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
  // @@protoc_insertion_point(field_set_allocated:SkeletonProto.pbRespStart.failReason)
}

// optional int32 pcSvrPoint = 3;
void pbRespStart::clear_pcsvrpoint() {
  pcsvrpoint_ = 0;
}
 ::google::protobuf::int32 pbRespStart::pcsvrpoint() const {
  // @@protoc_insertion_point(field_get:SkeletonProto.pbRespStart.pcSvrPoint)
  return pcsvrpoint_;
}
 void pbRespStart::set_pcsvrpoint(::google::protobuf::int32 value) {
  
  pcsvrpoint_ = value;
  // @@protoc_insertion_point(field_set:SkeletonProto.pbRespStart.pcSvrPoint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbRespEnd::kResultTypeFieldNumber;
const int pbRespEnd::kFailReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbRespEnd::pbRespEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkeletonProto.pbRespEnd)
}

void pbRespEnd::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbRespEnd::pbRespEnd(const pbRespEnd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkeletonProto.pbRespEnd)
}

void pbRespEnd::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resulttype_ = 0;
  failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

pbRespEnd::~pbRespEnd() {
  // @@protoc_insertion_point(destructor:SkeletonProto.pbRespEnd)
  SharedDtor();
}

void pbRespEnd::SharedDtor() {
  failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbRespEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRespEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRespEnd_descriptor_;
}

const pbRespEnd& pbRespEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkeletonProto_2eproto();
  return *default_instance_;
}

pbRespEnd* pbRespEnd::default_instance_ = NULL;

pbRespEnd* pbRespEnd::New(::google::protobuf::Arena* arena) const {
  pbRespEnd* n = new pbRespEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbRespEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:SkeletonProto.pbRespEnd)
  resulttype_ = 0;
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pbRespEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkeletonProto.pbRespEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resulttype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_failReason;
        break;
      }

      // optional string failReason = 2;
      case 2: {
        if (tag == 18) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SkeletonProto.pbRespEnd.failReason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkeletonProto.pbRespEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkeletonProto.pbRespEnd)
  return false;
#undef DO_
}

void pbRespEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkeletonProto.pbRespEnd)
  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resulttype(), output);
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SkeletonProto.pbRespEnd.failReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->failreason(), output);
  }

  // @@protoc_insertion_point(serialize_end:SkeletonProto.pbRespEnd)
}

::google::protobuf::uint8* pbRespEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkeletonProto.pbRespEnd)
  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resulttype(), target);
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SkeletonProto.pbRespEnd.failReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->failreason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SkeletonProto.pbRespEnd)
  return target;
}

int pbRespEnd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SkeletonProto.pbRespEnd)
  int total_size = 0;

  // optional int32 resultType = 1;
  if (this->resulttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resulttype());
  }

  // optional string failReason = 2;
  if (this->failreason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->failreason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRespEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SkeletonProto.pbRespEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbRespEnd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbRespEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SkeletonProto.pbRespEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SkeletonProto.pbRespEnd)
    MergeFrom(*source);
  }
}

void pbRespEnd::MergeFrom(const pbRespEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SkeletonProto.pbRespEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.resulttype() != 0) {
    set_resulttype(from.resulttype());
  }
  if (from.failreason().size() > 0) {

    failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
  }
}

void pbRespEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SkeletonProto.pbRespEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRespEnd::CopyFrom(const pbRespEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SkeletonProto.pbRespEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRespEnd::IsInitialized() const {

  return true;
}

void pbRespEnd::Swap(pbRespEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbRespEnd::InternalSwap(pbRespEnd* other) {
  std::swap(resulttype_, other->resulttype_);
  failreason_.Swap(&other->failreason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbRespEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRespEnd_descriptor_;
  metadata.reflection = pbRespEnd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbRespEnd

// optional int32 resultType = 1;
void pbRespEnd::clear_resulttype() {
  resulttype_ = 0;
}
 ::google::protobuf::int32 pbRespEnd::resulttype() const {
  // @@protoc_insertion_point(field_get:SkeletonProto.pbRespEnd.resultType)
  return resulttype_;
}
 void pbRespEnd::set_resulttype(::google::protobuf::int32 value) {
  
  resulttype_ = value;
  // @@protoc_insertion_point(field_set:SkeletonProto.pbRespEnd.resultType)
}

// optional string failReason = 2;
void pbRespEnd::clear_failreason() {
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbRespEnd::failreason() const {
  // @@protoc_insertion_point(field_get:SkeletonProto.pbRespEnd.failReason)
  return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespEnd::set_failreason(const ::std::string& value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SkeletonProto.pbRespEnd.failReason)
}
 void pbRespEnd::set_failreason(const char* value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SkeletonProto.pbRespEnd.failReason)
}
 void pbRespEnd::set_failreason(const char* value, size_t size) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SkeletonProto.pbRespEnd.failReason)
}
 ::std::string* pbRespEnd::mutable_failreason() {
  
  // @@protoc_insertion_point(field_mutable:SkeletonProto.pbRespEnd.failReason)
  return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbRespEnd::release_failreason() {
  // @@protoc_insertion_point(field_release:SkeletonProto.pbRespEnd.failReason)
  
  return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespEnd::set_allocated_failreason(::std::string* failreason) {
  if (failreason != NULL) {
    
  } else {
    
  }
  failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
  // @@protoc_insertion_point(field_set_allocated:SkeletonProto.pbRespEnd.failReason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SkeletonProto

// @@protoc_insertion_point(global_scope)
