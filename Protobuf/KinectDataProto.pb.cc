// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KinectDataProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KinectDataProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KinectDataProto {

namespace {

const ::google::protobuf::Descriptor* pbReqStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbReqStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRespStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRespStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbEndTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbEndTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbReqEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbReqEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KinectDataProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_KinectDataProto_2eproto() {
  protobuf_AddDesc_KinectDataProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KinectDataProto.proto");
  GOOGLE_CHECK(file != NULL);
  pbReqStart_descriptor_ = file->message_type(0);
  static const int pbReqStart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, skele_),
  };
  pbReqStart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbReqStart_descriptor_,
      pbReqStart::default_instance_,
      pbReqStart_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbReqStart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqStart, _is_default_instance_));
  pbRespStart_descriptor_ = file->message_type(1);
  static const int pbRespStart_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, resulttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, colorport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, depthport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, skeleport_),
  };
  pbRespStart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbRespStart_descriptor_,
      pbRespStart::default_instance_,
      pbRespStart_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbRespStart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRespStart, _is_default_instance_));
  pbEndTransfer_descriptor_ = file->message_type(2);
  static const int pbEndTransfer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbEndTransfer, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbEndTransfer, extension_),
  };
  pbEndTransfer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbEndTransfer_descriptor_,
      pbEndTransfer::default_instance_,
      pbEndTransfer_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbEndTransfer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbEndTransfer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbEndTransfer, _is_default_instance_));
  pbReqEnd_descriptor_ = file->message_type(3);
  static const int pbReqEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqEnd, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqEnd, extension_),
  };
  pbReqEnd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pbReqEnd_descriptor_,
      pbReqEnd::default_instance_,
      pbReqEnd_offsets_,
      -1,
      -1,
      -1,
      sizeof(pbReqEnd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqEnd, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbReqEnd, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KinectDataProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbReqStart_descriptor_, &pbReqStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbRespStart_descriptor_, &pbRespStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbEndTransfer_descriptor_, &pbEndTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pbReqEnd_descriptor_, &pbReqEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KinectDataProto_2eproto() {
  delete pbReqStart::default_instance_;
  delete pbReqStart_reflection_;
  delete pbRespStart::default_instance_;
  delete pbRespStart_reflection_;
  delete pbEndTransfer::default_instance_;
  delete pbEndTransfer_reflection_;
  delete pbReqEnd::default_instance_;
  delete pbReqEnd_reflection_;
}

void protobuf_AddDesc_KinectDataProto_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_KinectDataProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KinectDataProto.proto\022\017KinectDataProto"
    "\"M\n\npbReqStart\022\022\n\ndeviceName\030\001 \001(\t\022\r\n\005co"
    "lor\030\002 \001(\005\022\r\n\005depth\030\003 \001(\005\022\r\n\005skele\030\004 \001(\005\""
    "\220\001\n\013pbRespStart\022\022\n\ndeviceName\030\001 \001(\t\022\014\n\004g"
    "uid\030\002 \001(\t\022\022\n\nresultType\030\003 \001(\005\022\022\n\nfailRea"
    "son\030\004 \001(\t\022\021\n\tcolorPort\030\005 \001(\005\022\021\n\tdepthPor"
    "t\030\006 \001(\005\022\021\n\tskelePort\030\007 \001(\005\"6\n\rpbEndTrans"
    "fer\022\022\n\ndeviceName\030\001 \001(\t\022\021\n\textension\030\002 \001"
    "(\t\"1\n\010pbReqEnd\022\022\n\ndeviceName\030\001 \001(\t\022\021\n\tex"
    "tension\030\002 \001(\tb\006proto3", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KinectDataProto.proto", &protobuf_RegisterTypes);
  pbReqStart::default_instance_ = new pbReqStart();
  pbRespStart::default_instance_ = new pbRespStart();
  pbEndTransfer::default_instance_ = new pbEndTransfer();
  pbReqEnd::default_instance_ = new pbReqEnd();
  pbReqStart::default_instance_->InitAsDefaultInstance();
  pbRespStart::default_instance_->InitAsDefaultInstance();
  pbEndTransfer::default_instance_->InitAsDefaultInstance();
  pbReqEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KinectDataProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KinectDataProto_2eproto {
  StaticDescriptorInitializer_KinectDataProto_2eproto() {
    protobuf_AddDesc_KinectDataProto_2eproto();
  }
} static_descriptor_initializer_KinectDataProto_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbReqStart::kDeviceNameFieldNumber;
const int pbReqStart::kColorFieldNumber;
const int pbReqStart::kDepthFieldNumber;
const int pbReqStart::kSkeleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbReqStart::pbReqStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KinectDataProto.pbReqStart)
}

void pbReqStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbReqStart::pbReqStart(const pbReqStart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KinectDataProto.pbReqStart)
}

void pbReqStart::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_ = 0;
  depth_ = 0;
  skele_ = 0;
}

pbReqStart::~pbReqStart() {
  // @@protoc_insertion_point(destructor:KinectDataProto.pbReqStart)
  SharedDtor();
}

void pbReqStart::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbReqStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbReqStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbReqStart_descriptor_;
}

const pbReqStart& pbReqStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectDataProto_2eproto();
  return *default_instance_;
}

pbReqStart* pbReqStart::default_instance_ = NULL;

pbReqStart* pbReqStart::New(::google::protobuf::Arena* arena) const {
  pbReqStart* n = new pbReqStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbReqStart::Clear() {
// @@protoc_insertion_point(message_clear_start:KinectDataProto.pbReqStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbReqStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbReqStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(color_, skele_);
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool pbReqStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KinectDataProto.pbReqStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbReqStart.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }

      // optional int32 depth = 3;
      case 3: {
        if (tag == 24) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skele;
        break;
      }

      // optional int32 skele = 4;
      case 4: {
        if (tag == 32) {
         parse_skele:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skele_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KinectDataProto.pbReqStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KinectDataProto.pbReqStart)
  return false;
#undef DO_
}

void pbReqStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KinectDataProto.pbReqStart)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqStart.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  // optional int32 depth = 3;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // optional int32 skele = 4;
  if (this->skele() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skele(), output);
  }

  // @@protoc_insertion_point(serialize_end:KinectDataProto.pbReqStart)
}

::google::protobuf::uint8* pbReqStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KinectDataProto.pbReqStart)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqStart.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional int32 depth = 3;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // optional int32 skele = 4;
  if (this->skele() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skele(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KinectDataProto.pbReqStart)
  return target;
}

int pbReqStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KinectDataProto.pbReqStart)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // optional int32 depth = 3;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  // optional int32 skele = 4;
  if (this->skele() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skele());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbReqStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KinectDataProto.pbReqStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbReqStart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbReqStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KinectDataProto.pbReqStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KinectDataProto.pbReqStart)
    MergeFrom(*source);
  }
}

void pbReqStart::MergeFrom(const pbReqStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KinectDataProto.pbReqStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.skele() != 0) {
    set_skele(from.skele());
  }
}

void pbReqStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KinectDataProto.pbReqStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbReqStart::CopyFrom(const pbReqStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KinectDataProto.pbReqStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbReqStart::IsInitialized() const {

  return true;
}

void pbReqStart::Swap(pbReqStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbReqStart::InternalSwap(pbReqStart* other) {
  devicename_.Swap(&other->devicename_);
  std::swap(color_, other->color_);
  std::swap(depth_, other->depth_);
  std::swap(skele_, other->skele_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbReqStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbReqStart_descriptor_;
  metadata.reflection = pbReqStart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbReqStart

// optional string deviceName = 1;
void pbReqStart::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbReqStart::devicename() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqStart.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqStart::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqStart.deviceName)
}
 void pbReqStart::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbReqStart.deviceName)
}
 void pbReqStart::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbReqStart.deviceName)
}
 ::std::string* pbReqStart::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbReqStart.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbReqStart::release_devicename() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbReqStart.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqStart::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbReqStart.deviceName)
}

// optional int32 color = 2;
void pbReqStart::clear_color() {
  color_ = 0;
}
 ::google::protobuf::int32 pbReqStart::color() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqStart.color)
  return color_;
}
 void pbReqStart::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqStart.color)
}

// optional int32 depth = 3;
void pbReqStart::clear_depth() {
  depth_ = 0;
}
 ::google::protobuf::int32 pbReqStart::depth() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqStart.depth)
  return depth_;
}
 void pbReqStart::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqStart.depth)
}

// optional int32 skele = 4;
void pbReqStart::clear_skele() {
  skele_ = 0;
}
 ::google::protobuf::int32 pbReqStart::skele() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqStart.skele)
  return skele_;
}
 void pbReqStart::set_skele(::google::protobuf::int32 value) {
  
  skele_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqStart.skele)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbRespStart::kDeviceNameFieldNumber;
const int pbRespStart::kGuidFieldNumber;
const int pbRespStart::kResultTypeFieldNumber;
const int pbRespStart::kFailReasonFieldNumber;
const int pbRespStart::kColorPortFieldNumber;
const int pbRespStart::kDepthPortFieldNumber;
const int pbRespStart::kSkelePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbRespStart::pbRespStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KinectDataProto.pbRespStart)
}

void pbRespStart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbRespStart::pbRespStart(const pbRespStart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KinectDataProto.pbRespStart)
}

void pbRespStart::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resulttype_ = 0;
  failreason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  colorport_ = 0;
  depthport_ = 0;
  skeleport_ = 0;
}

pbRespStart::~pbRespStart() {
  // @@protoc_insertion_point(destructor:KinectDataProto.pbRespStart)
  SharedDtor();
}

void pbRespStart::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failreason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbRespStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRespStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRespStart_descriptor_;
}

const pbRespStart& pbRespStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectDataProto_2eproto();
  return *default_instance_;
}

pbRespStart* pbRespStart::default_instance_ = NULL;

pbRespStart* pbRespStart::New(::google::protobuf::Arena* arena) const {
  pbRespStart* n = new pbRespStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbRespStart::Clear() {
// @@protoc_insertion_point(message_clear_start:KinectDataProto.pbRespStart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(pbRespStart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<pbRespStart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resulttype_, skeleport_);
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool pbRespStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KinectDataProto.pbRespStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbRespStart.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (tag == 18) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbRespStart.guid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resultType;
        break;
      }

      // optional int32 resultType = 3;
      case 3: {
        if (tag == 24) {
         parse_resultType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resulttype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_failReason;
        break;
      }

      // optional string failReason = 4;
      case 4: {
        if (tag == 34) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbRespStart.failReason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_colorPort;
        break;
      }

      // optional int32 colorPort = 5;
      case 5: {
        if (tag == 40) {
         parse_colorPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_depthPort;
        break;
      }

      // optional int32 depthPort = 6;
      case 6: {
        if (tag == 48) {
         parse_depthPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depthport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skelePort;
        break;
      }

      // optional int32 skelePort = 7;
      case 7: {
        if (tag == 56) {
         parse_skelePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skeleport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KinectDataProto.pbRespStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KinectDataProto.pbRespStart)
  return false;
#undef DO_
}

void pbRespStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KinectDataProto.pbRespStart)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string guid = 2;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional int32 resultType = 3;
  if (this->resulttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resulttype(), output);
  }

  // optional string failReason = 4;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.failReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->failreason(), output);
  }

  // optional int32 colorPort = 5;
  if (this->colorport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->colorport(), output);
  }

  // optional int32 depthPort = 6;
  if (this->depthport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->depthport(), output);
  }

  // optional int32 skelePort = 7;
  if (this->skeleport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skeleport(), output);
  }

  // @@protoc_insertion_point(serialize_end:KinectDataProto.pbRespStart)
}

::google::protobuf::uint8* pbRespStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KinectDataProto.pbRespStart)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string guid = 2;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guid(), target);
  }

  // optional int32 resultType = 3;
  if (this->resulttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resulttype(), target);
  }

  // optional string failReason = 4;
  if (this->failreason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbRespStart.failReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->failreason(), target);
  }

  // optional int32 colorPort = 5;
  if (this->colorport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->colorport(), target);
  }

  // optional int32 depthPort = 6;
  if (this->depthport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->depthport(), target);
  }

  // optional int32 skelePort = 7;
  if (this->skeleport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skeleport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KinectDataProto.pbRespStart)
  return target;
}

int pbRespStart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KinectDataProto.pbRespStart)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string guid = 2;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guid());
  }

  // optional int32 resultType = 3;
  if (this->resulttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resulttype());
  }

  // optional string failReason = 4;
  if (this->failreason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->failreason());
  }

  // optional int32 colorPort = 5;
  if (this->colorport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorport());
  }

  // optional int32 depthPort = 6;
  if (this->depthport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depthport());
  }

  // optional int32 skelePort = 7;
  if (this->skeleport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skeleport());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRespStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KinectDataProto.pbRespStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbRespStart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbRespStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KinectDataProto.pbRespStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KinectDataProto.pbRespStart)
    MergeFrom(*source);
  }
}

void pbRespStart::MergeFrom(const pbRespStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KinectDataProto.pbRespStart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.guid().size() > 0) {

    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  if (from.resulttype() != 0) {
    set_resulttype(from.resulttype());
  }
  if (from.failreason().size() > 0) {

    failreason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.failreason_);
  }
  if (from.colorport() != 0) {
    set_colorport(from.colorport());
  }
  if (from.depthport() != 0) {
    set_depthport(from.depthport());
  }
  if (from.skeleport() != 0) {
    set_skeleport(from.skeleport());
  }
}

void pbRespStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KinectDataProto.pbRespStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRespStart::CopyFrom(const pbRespStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KinectDataProto.pbRespStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRespStart::IsInitialized() const {

  return true;
}

void pbRespStart::Swap(pbRespStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbRespStart::InternalSwap(pbRespStart* other) {
  devicename_.Swap(&other->devicename_);
  guid_.Swap(&other->guid_);
  std::swap(resulttype_, other->resulttype_);
  failreason_.Swap(&other->failreason_);
  std::swap(colorport_, other->colorport_);
  std::swap(depthport_, other->depthport_);
  std::swap(skeleport_, other->skeleport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbRespStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRespStart_descriptor_;
  metadata.reflection = pbRespStart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbRespStart

// optional string deviceName = 1;
void pbRespStart::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbRespStart::devicename() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.deviceName)
}
 void pbRespStart::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbRespStart.deviceName)
}
 void pbRespStart::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbRespStart.deviceName)
}
 ::std::string* pbRespStart::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbRespStart.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbRespStart::release_devicename() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbRespStart.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbRespStart.deviceName)
}

// optional string guid = 2;
void pbRespStart::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbRespStart::guid() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.guid)
  return guid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.guid)
}
 void pbRespStart::set_guid(const char* value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbRespStart.guid)
}
 void pbRespStart::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbRespStart.guid)
}
 ::std::string* pbRespStart::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbRespStart.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbRespStart::release_guid() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbRespStart.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbRespStart.guid)
}

// optional int32 resultType = 3;
void pbRespStart::clear_resulttype() {
  resulttype_ = 0;
}
 ::google::protobuf::int32 pbRespStart::resulttype() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.resultType)
  return resulttype_;
}
 void pbRespStart::set_resulttype(::google::protobuf::int32 value) {
  
  resulttype_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.resultType)
}

// optional string failReason = 4;
void pbRespStart::clear_failreason() {
  failreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbRespStart::failreason() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.failReason)
  return failreason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_failreason(const ::std::string& value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.failReason)
}
 void pbRespStart::set_failreason(const char* value) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbRespStart.failReason)
}
 void pbRespStart::set_failreason(const char* value, size_t size) {
  
  failreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbRespStart.failReason)
}
 ::std::string* pbRespStart::mutable_failreason() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbRespStart.failReason)
  return failreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbRespStart::release_failreason() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbRespStart.failReason)
  
  return failreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbRespStart::set_allocated_failreason(::std::string* failreason) {
  if (failreason != NULL) {
    
  } else {
    
  }
  failreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), failreason);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbRespStart.failReason)
}

// optional int32 colorPort = 5;
void pbRespStart::clear_colorport() {
  colorport_ = 0;
}
 ::google::protobuf::int32 pbRespStart::colorport() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.colorPort)
  return colorport_;
}
 void pbRespStart::set_colorport(::google::protobuf::int32 value) {
  
  colorport_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.colorPort)
}

// optional int32 depthPort = 6;
void pbRespStart::clear_depthport() {
  depthport_ = 0;
}
 ::google::protobuf::int32 pbRespStart::depthport() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.depthPort)
  return depthport_;
}
 void pbRespStart::set_depthport(::google::protobuf::int32 value) {
  
  depthport_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.depthPort)
}

// optional int32 skelePort = 7;
void pbRespStart::clear_skeleport() {
  skeleport_ = 0;
}
 ::google::protobuf::int32 pbRespStart::skeleport() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbRespStart.skelePort)
  return skeleport_;
}
 void pbRespStart::set_skeleport(::google::protobuf::int32 value) {
  
  skeleport_ = value;
  // @@protoc_insertion_point(field_set:KinectDataProto.pbRespStart.skelePort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbEndTransfer::kDeviceNameFieldNumber;
const int pbEndTransfer::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbEndTransfer::pbEndTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KinectDataProto.pbEndTransfer)
}

void pbEndTransfer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbEndTransfer::pbEndTransfer(const pbEndTransfer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KinectDataProto.pbEndTransfer)
}

void pbEndTransfer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

pbEndTransfer::~pbEndTransfer() {
  // @@protoc_insertion_point(destructor:KinectDataProto.pbEndTransfer)
  SharedDtor();
}

void pbEndTransfer::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbEndTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbEndTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbEndTransfer_descriptor_;
}

const pbEndTransfer& pbEndTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectDataProto_2eproto();
  return *default_instance_;
}

pbEndTransfer* pbEndTransfer::default_instance_ = NULL;

pbEndTransfer* pbEndTransfer::New(::google::protobuf::Arena* arena) const {
  pbEndTransfer* n = new pbEndTransfer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbEndTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:KinectDataProto.pbEndTransfer)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pbEndTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KinectDataProto.pbEndTransfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbEndTransfer.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extension;
        break;
      }

      // optional string extension = 2;
      case 2: {
        if (tag == 18) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extension().data(), this->extension().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbEndTransfer.extension"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KinectDataProto.pbEndTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KinectDataProto.pbEndTransfer)
  return false;
#undef DO_
}

void pbEndTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KinectDataProto.pbEndTransfer)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbEndTransfer.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbEndTransfer.extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension(), output);
  }

  // @@protoc_insertion_point(serialize_end:KinectDataProto.pbEndTransfer)
}

::google::protobuf::uint8* pbEndTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KinectDataProto.pbEndTransfer)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbEndTransfer.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbEndTransfer.extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extension(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KinectDataProto.pbEndTransfer)
  return target;
}

int pbEndTransfer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KinectDataProto.pbEndTransfer)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbEndTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KinectDataProto.pbEndTransfer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbEndTransfer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbEndTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KinectDataProto.pbEndTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KinectDataProto.pbEndTransfer)
    MergeFrom(*source);
  }
}

void pbEndTransfer::MergeFrom(const pbEndTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KinectDataProto.pbEndTransfer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
}

void pbEndTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KinectDataProto.pbEndTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbEndTransfer::CopyFrom(const pbEndTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KinectDataProto.pbEndTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbEndTransfer::IsInitialized() const {

  return true;
}

void pbEndTransfer::Swap(pbEndTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbEndTransfer::InternalSwap(pbEndTransfer* other) {
  devicename_.Swap(&other->devicename_);
  extension_.Swap(&other->extension_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbEndTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbEndTransfer_descriptor_;
  metadata.reflection = pbEndTransfer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbEndTransfer

// optional string deviceName = 1;
void pbEndTransfer::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbEndTransfer::devicename() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbEndTransfer.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbEndTransfer::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbEndTransfer.deviceName)
}
 void pbEndTransfer::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbEndTransfer.deviceName)
}
 void pbEndTransfer::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbEndTransfer.deviceName)
}
 ::std::string* pbEndTransfer::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbEndTransfer.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbEndTransfer::release_devicename() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbEndTransfer.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbEndTransfer::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbEndTransfer.deviceName)
}

// optional string extension = 2;
void pbEndTransfer::clear_extension() {
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbEndTransfer::extension() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbEndTransfer.extension)
  return extension_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbEndTransfer::set_extension(const ::std::string& value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbEndTransfer.extension)
}
 void pbEndTransfer::set_extension(const char* value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbEndTransfer.extension)
}
 void pbEndTransfer::set_extension(const char* value, size_t size) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbEndTransfer.extension)
}
 ::std::string* pbEndTransfer::mutable_extension() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbEndTransfer.extension)
  return extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbEndTransfer::release_extension() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbEndTransfer.extension)
  
  return extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbEndTransfer::set_allocated_extension(::std::string* extension) {
  if (extension != NULL) {
    
  } else {
    
  }
  extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbEndTransfer.extension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbReqEnd::kDeviceNameFieldNumber;
const int pbReqEnd::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbReqEnd::pbReqEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KinectDataProto.pbReqEnd)
}

void pbReqEnd::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

pbReqEnd::pbReqEnd(const pbReqEnd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KinectDataProto.pbReqEnd)
}

void pbReqEnd::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

pbReqEnd::~pbReqEnd() {
  // @@protoc_insertion_point(destructor:KinectDataProto.pbReqEnd)
  SharedDtor();
}

void pbReqEnd::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void pbReqEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbReqEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbReqEnd_descriptor_;
}

const pbReqEnd& pbReqEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KinectDataProto_2eproto();
  return *default_instance_;
}

pbReqEnd* pbReqEnd::default_instance_ = NULL;

pbReqEnd* pbReqEnd::New(::google::protobuf::Arena* arena) const {
  pbReqEnd* n = new pbReqEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pbReqEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:KinectDataProto.pbReqEnd)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool pbReqEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KinectDataProto.pbReqEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbReqEnd.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extension;
        break;
      }

      // optional string extension = 2;
      case 2: {
        if (tag == 18) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extension().data(), this->extension().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "KinectDataProto.pbReqEnd.extension"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KinectDataProto.pbReqEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KinectDataProto.pbReqEnd)
  return false;
#undef DO_
}

void pbReqEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KinectDataProto.pbReqEnd)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqEnd.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqEnd.extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension(), output);
  }

  // @@protoc_insertion_point(serialize_end:KinectDataProto.pbReqEnd)
}

::google::protobuf::uint8* pbReqEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KinectDataProto.pbReqEnd)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqEnd.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "KinectDataProto.pbReqEnd.extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extension(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KinectDataProto.pbReqEnd)
  return target;
}

int pbReqEnd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KinectDataProto.pbReqEnd)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string extension = 2;
  if (this->extension().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbReqEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KinectDataProto.pbReqEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const pbReqEnd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pbReqEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KinectDataProto.pbReqEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KinectDataProto.pbReqEnd)
    MergeFrom(*source);
  }
}

void pbReqEnd::MergeFrom(const pbReqEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KinectDataProto.pbReqEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.extension().size() > 0) {

    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
}

void pbReqEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KinectDataProto.pbReqEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbReqEnd::CopyFrom(const pbReqEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KinectDataProto.pbReqEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbReqEnd::IsInitialized() const {

  return true;
}

void pbReqEnd::Swap(pbReqEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbReqEnd::InternalSwap(pbReqEnd* other) {
  devicename_.Swap(&other->devicename_);
  extension_.Swap(&other->extension_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pbReqEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbReqEnd_descriptor_;
  metadata.reflection = pbReqEnd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pbReqEnd

// optional string deviceName = 1;
void pbReqEnd::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbReqEnd::devicename() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqEnd.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqEnd::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqEnd.deviceName)
}
 void pbReqEnd::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbReqEnd.deviceName)
}
 void pbReqEnd::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbReqEnd.deviceName)
}
 ::std::string* pbReqEnd::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbReqEnd.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbReqEnd::release_devicename() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbReqEnd.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqEnd::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbReqEnd.deviceName)
}

// optional string extension = 2;
void pbReqEnd::clear_extension() {
  extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& pbReqEnd::extension() const {
  // @@protoc_insertion_point(field_get:KinectDataProto.pbReqEnd.extension)
  return extension_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqEnd::set_extension(const ::std::string& value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KinectDataProto.pbReqEnd.extension)
}
 void pbReqEnd::set_extension(const char* value) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KinectDataProto.pbReqEnd.extension)
}
 void pbReqEnd::set_extension(const char* value, size_t size) {
  
  extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KinectDataProto.pbReqEnd.extension)
}
 ::std::string* pbReqEnd::mutable_extension() {
  
  // @@protoc_insertion_point(field_mutable:KinectDataProto.pbReqEnd.extension)
  return extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pbReqEnd::release_extension() {
  // @@protoc_insertion_point(field_release:KinectDataProto.pbReqEnd.extension)
  
  return extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pbReqEnd::set_allocated_extension(::std::string* extension) {
  if (extension != NULL) {
    
  } else {
    
  }
  extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:KinectDataProto.pbReqEnd.extension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KinectDataProto

// @@protoc_insertion_point(global_scope)
